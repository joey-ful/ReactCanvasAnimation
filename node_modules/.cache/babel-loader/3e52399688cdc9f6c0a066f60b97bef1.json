{"ast":null,"code":"export default class Planet {\n  constructor(name, star, _radius, color, velocity, orbitRadius) {\n    this.onMouseDown = e => {\n      this.offsetX = e.clientX - this.x;\n      this.offsetY = e.clientY - this.y;\n      let radius = this.radius;\n\n      if (this.options['planet-art']) {\n        if (this.name === 'saturn') {\n          radius = this.radius * 4;\n        } else if (this.name === 'uranus') {\n          radius = this.radius * 4.2;\n        }\n      }\n\n      if (Math.abs(this.offsetX) <= radius && Math.abs(this.offsetY) <= this.radius) {\n        this.clicked = true;\n        this.mouse.x = e.clientX - this.offsetX;\n        this.mouse.y = e.clientY - this.offsetY;\n        this.canvas.addEventListener('mousemove', this.onMouseMove);\n      }\n    };\n\n    this.onMouseMove = e => {\n      this.mouse.x = e.clientX - this.offsetX;\n      this.mouse.y = e.clientY - this.offsetY;\n\n      if (this.name !== 'sun' && this.name !== 'moon') {\n        this.orbitRadius = Math.sqrt(Math.pow(this.mouse.x - this.star.x, 2) + Math.pow(this.mouse.y - this.star.y, 2));\n        this.theta = Math.acos((this.mouse.x - this.star.x) / this.orbitRadius);\n\n        if (this.mouse.y - this.star.y < 0) {\n          this.theta = 2 * Math.PI - this.theta;\n        }\n\n        this.toX = this.mouse.x + (this.radius + 30) * Math.cos(this.theta);\n        this.toY = this.mouse.y + (this.radius + 30) * Math.sin(this.theta);\n      }\n    };\n\n    this.restore = () => {\n      if (this.clicked && this.name !== 'sun') {\n        this.clicked = false;\n        this.orbitRadius = Math.sqrt(Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2));\n        this.theta = Math.acos((this.x - this.star.x) / this.orbitRadius);\n\n        if (this.y - this.star.y < 0) {\n          this.theta = 2 * Math.PI - this.theta;\n        }\n\n        this.canvas.removeEventListener('mousemove', this.onMouseMove);\n      } else if (this.clicked && this.name === 'sun') {\n        this.clicked = false;\n        this.star.x = this.x;\n        this.star.y = this.y;\n        this.canvas.removeEventListener('mousemove', this.onMouseMove);\n      }\n\n      this.canvas.removeEventListener('mousedown', this.onMouseDown);\n    };\n\n    this.name = name;\n    this.star = star;\n    this.radius = _radius;\n    this.color = color;\n    this.velocity = velocity;\n    this.orbitRadius = orbitRadius;\n    this.theta = Math.random() * Math.PI * 2;\n    this.clicked = false;\n    this.mouse = {\n      x: star.x,\n      y: star.y\n    };\n    this.distanceFromCenter = orbitRadius;\n    this.x = star.x + orbitRadius * Math.cos(this.theta);\n    this.y = star.y + orbitRadius * Math.sin(this.theta);\n    this.img = new Image();\n  }\n\n  update(ctx, options, planetArt) {\n    this.theta += this.velocity;\n    this.options = options;\n    this.setDragOption(options);\n    this.setPlanetArtOption(ctx, planetArtToggle);\n  }\n\n  setDragOption(options) {\n    if (options['no-drag']) {\n      this.noDragUpdate();\n    } else if (options['basic-drag']) {\n      this.interaction();\n      this.dragUpdate();\n    } else if (options['elastic-drag']) {\n      this.interaction();\n      this.elasticDragUpdate();\n    }\n  }\n\n  noDragUpdate() {\n    this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n    this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n  }\n\n  dragUpdate() {\n    if (this.clicked) {\n      this.x = this.mouse.x;\n      this.y = this.mouse.y;\n    } else {\n      this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    }\n  }\n\n  elasticDragUpdate() {\n    if (this.clicked) {\n      this.x += (this.mouse.x - this.x) * 0.05;\n      this.y += (this.mouse.y - this.y) * 0.05;\n    } else {\n      this.distanceFromCenter = Math.sqrt(Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2));\n      this.distanceFromCenter += (this.orbitRadius - this.distanceFromCenter) * 0.2;\n      this.x = this.star.x + this.distanceFromCenter * Math.cos(this.theta);\n      this.y = this.star.y + this.distanceFromCenter * Math.sin(this.theta);\n    }\n  }\n\n  drawShadow(shadowctx, options) {\n    if (options['round-shadow']) {\n      this.drawRoundShadow(shadowctx, options);\n    } else if (options['rectangular-shadow']) {\n      this.drawRectangularShadow(shadowctx, options);\n    }\n  }\n\n  drawRectangularShadow(shadowctx, options) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findShadowEndPoint();\n      shadowctx.beginPath();\n\n      if (options['background']) {\n        shadowctx.strokeStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.strokeStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.moveTo(this.x, this.y);\n      shadowctx.lineTo(this.toX, this.toY);\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.stroke();\n      shadowctx.closePath();\n    }\n  }\n\n  findShadowEndPoint() {\n    let extralength = this.setShadowLength();\n    this.toX = this.x + (this.radius + extralength) * Math.cos(this.theta);\n    this.toY = this.y + (this.radius + extralength) * Math.sin(this.theta);\n  }\n\n  setShadowLength() {\n    let extralength = 17;\n\n    if (this.name === 'venus') {\n      extralength += 2;\n    } else if (this.name === 'earth') {\n      extralength += 17;\n    } else if (this.name === 'mars') {\n      extralength += 18;\n    } else if (this.name === 'jupiter') {\n      extralength += 5;\n    } else if (this.name === 'saturn') {\n      extralength += 6;\n    } else if (this.name === 'uranus') {\n      extralength += 4;\n    }\n\n    return extralength;\n  }\n\n  drawRoundShadow(shadowctx, options) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findXYdistance(options);\n      this.findShadowCurveDepth();\n      this.findShadowPoints();\n      shadowctx.beginPath();\n      shadowctx.moveTo(this.Ax, this.Ay);\n      shadowctx.bezierCurveTo(this.Ax + this.BezierX, this.Ay + this.BezierY, this.Bx + this.BezierX, this.By + this.BezierY, this.Bx, this.By);\n      shadowctx.lineTo(this.Bx + this.shadowLengthX, this.By + this.shadowLengthY);\n      shadowctx.bezierCurveTo(this.Bx + this.BezierX + this.shadowLengthX, this.By + this.BezierY + this.shadowLengthY, this.Ax + this.BezierX + this.shadowLengthX, this.Ay + this.BezierY + this.shadowLengthY, this.Ax + this.shadowLengthX, this.Ay + this.shadowLengthY);\n      shadowctx.lineTo(this.Ax, this.Ay);\n\n      if (options.background) {\n        shadowctx.fillStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.fillStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n\n      shadowctx.fill();\n      shadowctx.closePath();\n    }\n  }\n\n  findXYdistance(options) {\n    let radius = this.radius;\n\n    if (options['planet-art']) {\n      if (this.name === 'saturn') {\n        radius = this.radius * 0.8;\n      }\n    }\n\n    this.radiusX = radius * Math.sin(this.theta);\n    this.radiusY = radius * Math.cos(this.theta);\n    this.shadowLengthX = (this.radius + 20) * Math.cos(this.theta);\n    this.shadowLengthY = (this.radius + 20) * Math.sin(this.theta);\n\n    if (this.name === 'mars') {\n      this.shadowLengthX = (this.radius + 46) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 46) * Math.sin(this.theta);\n    } else if (this.name === 'earth') {\n      this.shadowLengthX = (this.radius + 30) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 30) * Math.sin(this.theta);\n    }\n  }\n\n  findShadowCurveDepth() {\n    this.BezierX = this.radius / 1.5 * Math.cos(this.theta);\n    this.BezierY = this.radius / 1.5 * Math.sin(this.theta);\n  }\n\n  findShadowPoints() {\n    this.Ax = this.x + this.radiusX;\n    this.Ay = this.y - this.radiusY;\n    this.Bx = this.x - this.radiusX;\n    this.By = this.y + this.radiusY;\n    this.Cx = this.Bx + this.shadowLengthX;\n    this.Cy = this.By + this.shadowLengthY;\n    this.Dx = this.Ax + this.shadowLengthX;\n    this.Dy = this.Ay + this.shadowLengthY;\n  }\n\n  setPlanetArtOption(ctx, planetArt) {\n    if (planetArt) {\n      this.drawArt(ctx);\n    } else {\n      this.drawCircle(ctx);\n    }\n  }\n\n  drawArt(ctx) {\n    ctx.beginPath();\n    let width = this.radius * 2;\n    let imgX = this.x - this.radius;\n    let imgY = this.y - this.radius;\n\n    if (this.name === 'saturn') {\n      width = this.radius * 4;\n      imgX -= this.radius;\n    } else if (this.name === 'uranus') {\n      width = this.radius * 4.2;\n      imgX -= this.radius * 1.1;\n    }\n\n    ctx.drawImage(this.img, imgX, imgY, width, this.radius * 2);\n    this.img.src = `./images/${this.name}.png`;\n    ctx.closePath();\n  }\n\n  drawCircle(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  drawOrbitPath(pathctx) {\n    pathctx.beginPath();\n    pathctx.arc(this.star.x, this.star.y, this.orbitRadius, 0, Math.PI * 2, false);\n    pathctx.globalAlpha = 0.4;\n    pathctx.strokeStyle = this.color;\n    pathctx.stroke();\n    pathctx.closePath();\n  }\n\n  interaction() {\n    this.canvas = document.getElementById('shadowcanvas');\n    this.canvas.addEventListener('mousedown', this.onMouseDown);\n    this.canvas.addEventListener('mouseup', this.restore);\n    this.canvas.addEventListener('mouseout', this.restore);\n  }\n\n}","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/js/Planet.js"],"names":["Planet","constructor","name","star","radius","color","velocity","orbitRadius","onMouseDown","e","offsetX","clientX","x","offsetY","clientY","y","options","Math","abs","clicked","mouse","canvas","addEventListener","onMouseMove","sqrt","pow","theta","acos","PI","toX","cos","toY","sin","restore","removeEventListener","random","distanceFromCenter","img","Image","update","ctx","planetArt","setDragOption","setPlanetArtOption","planetArtToggle","noDragUpdate","interaction","dragUpdate","elasticDragUpdate","drawShadow","shadowctx","drawRoundShadow","drawRectangularShadow","findShadowEndPoint","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","extralength","setShadowLength","findXYdistance","findShadowCurveDepth","findShadowPoints","Ax","Ay","bezierCurveTo","BezierX","BezierY","Bx","By","shadowLengthX","shadowLengthY","background","fillStyle","fill","radiusX","radiusY","Cx","Cy","Dx","Dy","drawArt","drawCircle","width","imgX","imgY","drawImage","src","arc","drawOrbitPath","pathctx","globalAlpha","document","getElementById"],"mappings":"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","sourcesContent":["export default class Planet {\n  constructor(name, star, radius, color, velocity, orbitRadius) {\n    this.name = name;\n    this.star = star;\n    this.radius = radius;\n    this.color = color;\n    this.velocity = velocity;\n    this.orbitRadius = orbitRadius;\n\n    this.theta = Math.random() * Math.PI * 2;\n    this.clicked = false;\n    this.mouse = {\n      x: star.x,\n      y: star.y,\n    };\n\n    this.distanceFromCenter = orbitRadius;\n    this.x = star.x + orbitRadius * Math.cos(this.theta);\n    this.y = star.y + orbitRadius * Math.sin(this.theta);\n    this.img = new Image();\n  }\n\n  update(ctx, options, planetArt) {\n    this.theta += this.velocity;\n    this.options = options;\n\n    this.setDragOption(options);\n    this.setPlanetArtOption(ctx, planetArtToggle);\n  }\n\n  setDragOption(options) {\n    if (options['no-drag']) {\n      this.noDragUpdate();\n    } else if (options['basic-drag']) {\n      this.interaction();\n      this.dragUpdate();\n    } else if (options['elastic-drag']) {\n      this.interaction();\n      this.elasticDragUpdate();\n    }\n  }\n\n  noDragUpdate() {\n    this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n    this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n  }\n\n  dragUpdate() {\n    if (this.clicked) {\n      this.x = this.mouse.x;\n      this.y = this.mouse.y;\n    } else {\n      this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    }\n  }\n\n  elasticDragUpdate() {\n    if (this.clicked) {\n      this.x += (this.mouse.x - this.x) * 0.05;\n      this.y += (this.mouse.y - this.y) * 0.05;\n    } else {\n      this.distanceFromCenter = Math.sqrt(\n        Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2)\n      );\n      this.distanceFromCenter +=\n        (this.orbitRadius - this.distanceFromCenter) * 0.2;\n      this.x = this.star.x + this.distanceFromCenter * Math.cos(this.theta);\n      this.y = this.star.y + this.distanceFromCenter * Math.sin(this.theta);\n    }\n  }\n\n  drawShadow(shadowctx, options) {\n    if (options['round-shadow']) {\n      this.drawRoundShadow(shadowctx, options);\n    } else if (options['rectangular-shadow']) {\n      this.drawRectangularShadow(shadowctx, options);\n    }\n  }\n\n  drawRectangularShadow(shadowctx, options) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findShadowEndPoint();\n\n      shadowctx.beginPath();\n      if (options['background']) {\n        shadowctx.strokeStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.strokeStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.moveTo(this.x, this.y);\n      shadowctx.lineTo(this.toX, this.toY);\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.stroke();\n      shadowctx.closePath();\n    }\n  }\n\n  findShadowEndPoint() {\n    let extralength = this.setShadowLength();\n\n    this.toX = this.x + (this.radius + extralength) * Math.cos(this.theta);\n    this.toY = this.y + (this.radius + extralength) * Math.sin(this.theta);\n  }\n\n  setShadowLength() {\n    let extralength = 17;\n\n    if (this.name === 'venus') {\n      extralength += 2;\n    } else if (this.name === 'earth') {\n      extralength += 17;\n    } else if (this.name === 'mars') {\n      extralength += 18;\n    } else if (this.name === 'jupiter') {\n      extralength += 5;\n    } else if (this.name === 'saturn') {\n      extralength += 6;\n    } else if (this.name === 'uranus') {\n      extralength += 4;\n    }\n\n    return extralength;\n  }\n\n  drawRoundShadow(shadowctx, options) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findXYdistance(options);\n      this.findShadowCurveDepth();\n      this.findShadowPoints();\n\n      shadowctx.beginPath();\n      shadowctx.moveTo(this.Ax, this.Ay);\n      shadowctx.bezierCurveTo(\n        this.Ax + this.BezierX,\n        this.Ay + this.BezierY,\n        this.Bx + this.BezierX,\n        this.By + this.BezierY,\n        this.Bx,\n        this.By\n      );\n      shadowctx.lineTo(\n        this.Bx + this.shadowLengthX,\n        this.By + this.shadowLengthY\n      );\n      shadowctx.bezierCurveTo(\n        this.Bx + this.BezierX + this.shadowLengthX,\n        this.By + this.BezierY + this.shadowLengthY,\n        this.Ax + this.BezierX + this.shadowLengthX,\n        this.Ay + this.BezierY + this.shadowLengthY,\n        this.Ax + this.shadowLengthX,\n        this.Ay + this.shadowLengthY\n      );\n      shadowctx.lineTo(this.Ax, this.Ay);\n      if (options.background) {\n        shadowctx.fillStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.fillStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n      shadowctx.fill();\n      shadowctx.closePath();\n    }\n  }\n\n  findXYdistance(options) {\n    let radius = this.radius;\n\n    if (options['planet-art']) {\n      if (this.name === 'saturn') {\n        radius = this.radius * 0.8;\n      }\n    }\n\n    this.radiusX = radius * Math.sin(this.theta);\n    this.radiusY = radius * Math.cos(this.theta);\n    this.shadowLengthX = (this.radius + 20) * Math.cos(this.theta);\n    this.shadowLengthY = (this.radius + 20) * Math.sin(this.theta);\n\n    if (this.name === 'mars') {\n      this.shadowLengthX = (this.radius + 46) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 46) * Math.sin(this.theta);\n    } else if (this.name === 'earth') {\n      this.shadowLengthX = (this.radius + 30) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 30) * Math.sin(this.theta);\n    }\n  }\n\n  findShadowCurveDepth() {\n    this.BezierX = (this.radius / 1.5) * Math.cos(this.theta);\n    this.BezierY = (this.radius / 1.5) * Math.sin(this.theta);\n  }\n\n  findShadowPoints() {\n    this.Ax = this.x + this.radiusX;\n    this.Ay = this.y - this.radiusY;\n    this.Bx = this.x - this.radiusX;\n    this.By = this.y + this.radiusY;\n    this.Cx = this.Bx + this.shadowLengthX;\n    this.Cy = this.By + this.shadowLengthY;\n    this.Dx = this.Ax + this.shadowLengthX;\n    this.Dy = this.Ay + this.shadowLengthY;\n  }\n\n  setPlanetArtOption(ctx, planetArt) {\n    if (planetArt) {\n      this.drawArt(ctx);\n    } else {\n      this.drawCircle(ctx);\n    }\n  }\n\n  drawArt(ctx) {\n    ctx.beginPath();\n\n    let width = this.radius * 2;\n    let imgX = this.x - this.radius;\n    let imgY = this.y - this.radius;\n\n    if (this.name === 'saturn') {\n      width = this.radius * 4;\n      imgX -= this.radius;\n    } else if (this.name === 'uranus') {\n      width = this.radius * 4.2;\n      imgX -= this.radius * 1.1;\n    }\n\n    ctx.drawImage(this.img, imgX, imgY, width, this.radius * 2);\n    this.img.src = `./images/${this.name}.png`;\n    ctx.closePath();\n  }\n\n  drawCircle(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  drawOrbitPath(pathctx) {\n    pathctx.beginPath();\n    pathctx.arc(\n      this.star.x,\n      this.star.y,\n      this.orbitRadius,\n      0,\n      Math.PI * 2,\n      false\n    );\n    pathctx.globalAlpha = 0.4;\n    pathctx.strokeStyle = this.color;\n    pathctx.stroke();\n    pathctx.closePath();\n  }\n\n  interaction() {\n    this.canvas = document.getElementById('shadowcanvas');\n\n    this.canvas.addEventListener('mousedown', this.onMouseDown);\n    this.canvas.addEventListener('mouseup', this.restore);\n    this.canvas.addEventListener('mouseout', this.restore);\n  }\n\n  onMouseDown = (e) => {\n    this.offsetX = e.clientX - this.x;\n    this.offsetY = e.clientY - this.y;\n\n    let radius = this.radius;\n\n    if (this.options['planet-art']) {\n      if (this.name === 'saturn') {\n        radius = this.radius * 4;\n      } else if (this.name === 'uranus') {\n        radius = this.radius * 4.2;\n      }\n    }\n\n    if (\n      Math.abs(this.offsetX) <= radius &&\n      Math.abs(this.offsetY) <= this.radius\n    ) {\n      this.clicked = true;\n      this.mouse.x = e.clientX - this.offsetX;\n      this.mouse.y = e.clientY - this.offsetY;\n      this.canvas.addEventListener('mousemove', this.onMouseMove);\n    }\n  };\n\n  onMouseMove = (e) => {\n    this.mouse.x = e.clientX - this.offsetX;\n    this.mouse.y = e.clientY - this.offsetY;\n\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.orbitRadius = Math.sqrt(\n        Math.pow(this.mouse.x - this.star.x, 2) +\n          Math.pow(this.mouse.y - this.star.y, 2)\n      );\n      this.theta = Math.acos((this.mouse.x - this.star.x) / this.orbitRadius);\n\n      if (this.mouse.y - this.star.y < 0) {\n        this.theta = 2 * Math.PI - this.theta;\n      }\n\n      this.toX = this.mouse.x + (this.radius + 30) * Math.cos(this.theta);\n      this.toY = this.mouse.y + (this.radius + 30) * Math.sin(this.theta);\n    }\n  };\n\n  restore = () => {\n    if (this.clicked && this.name !== 'sun') {\n      this.clicked = false;\n\n      this.orbitRadius = Math.sqrt(\n        Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2)\n      );\n      this.theta = Math.acos((this.x - this.star.x) / this.orbitRadius);\n\n      if (this.y - this.star.y < 0) {\n        this.theta = 2 * Math.PI - this.theta;\n      }\n\n      this.canvas.removeEventListener('mousemove', this.onMouseMove);\n    } else if (this.clicked && this.name === 'sun') {\n      this.clicked = false;\n      this.star.x = this.x;\n      this.star.y = this.y;\n      this.canvas.removeEventListener('mousemove', this.onMouseMove);\n    }\n\n    this.canvas.removeEventListener('mousedown', this.onMouseDown);\n  };\n}"]},"metadata":{},"sourceType":"module"}