{"ast":null,"code":"import React, { useReducer, createContext, useContext, useRef } from 'react';\nexport const planetInfo = [{\n  id: 0,\n  name: 'sun',\n  star: 'sun',\n  radius: 80,\n  color: '#FFF599',\n  velocity: 0,\n  orbitRadius: 0,\n  theta: Math.random() * Math.PI * 2,\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n  mouseX: window.innerWidth / 2,\n  mouseY: window.innerHeight / 2,\n  clicked: false\n}, // {\n//   id: 1,\n//   name: 'mercury',\n//   star: 'sun',\n//   radius: 5,\n//   color: '#74B1E9',\n//   velocity: 0.008,\n//   orbitRadius: 120,\n//   x: 0,\n//   y: 0,\n// },\n// {\n//   id: 2,\n//   name: 'venus',\n//   star: 'sun',\n//   radius: 11,\n//   color: '#F3E6B7',\n//   velocity: 0.005,\n//   orbitRadius: 142,\n//   x: 0,\n//   y: 0,\n// },\n{\n  id: 3,\n  name: 'earth',\n  star: 'sun',\n  radius: 13,\n  color: '#AAE7F0',\n  velocity: 0.006,\n  orbitRadius: 172,\n  theta: Math.random() * Math.PI * 2,\n  x: 0,\n  y: 0,\n  mouseX: 0,\n  mouseY: 0,\n  clicked: false\n}, {\n  id: 4,\n  name: 'moon',\n  star: 'earth',\n  radius: 4,\n  color: '#F0F7F8',\n  velocity: 0.02,\n  orbitRadius: 28,\n  theta: Math.random() * Math.PI * 2,\n  x: 0,\n  y: 0,\n  mouseX: 0,\n  mouseY: 0,\n  clicked: false\n} // {\n//   id: 5,\n//   name: 'mars',\n//   star: 'sun',\n//   radius: 6,\n//   color: '#F39999',\n//   velocity: 0.007,\n//   orbitRadius: 219,\n// },\n// {\n//   id: 6,\n//   name: 'jupiter',\n//   star: 'sun',\n//   radius: 28,\n//   color: '#B3D8A1',\n//   velocity: 0.004,\n//   orbitRadius: 260,\n// },\n// {\n//   id: 7,\n//   name: 'saturn',\n//   star: 'sun',\n//   radius: 24,\n//   color: '#E3AE90',\n//   velocity: 0.0035,\n//   orbitRadius: 310,\n// },\n// {\n//   id: 8,\n//   name: 'uranus',\n//   star: 'sun',\n//   radius: 18,\n//   color: '#8C7E75',\n//   velocity: 0.003,\n//   orbitRadius: 357,\n// },\n// {\n//   id: 9,\n//   name: 'neptune',\n//   star: 'sun',\n//   radius: 16,\n//   color: '#A888BB',\n//   velocity: 0.002,\n//   orbitRadius: 396,\n// },\n]; // function planetReducer(state, action) {\n//   switch (action.type) {\n//     case 'ANIMATE':\n//       return state.map(planet =>\n//         planet.name === action.name ? { ...planet, x: action.x, y: action.y} : planet\n//       );\n//     case 'CLICK':\n//       return state.map(planet =>\n//         planet.name === action.name ? { ...planet, clicked: !planet.clicked} : planet\n//       );\n//     case 'DRAG':\n//       return state.map(planet =>\n//         planet.name === action.name ? { ...planet, mouseX: action.mouseX, mouxeY: action.mouseY} : planet\n//       );\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n// const PlanetStateContext = createContext();\n// const PlanetDispatchContext = createContext();\n// export function PlanetProvider({children}) {\n//   const [state, dispatch] = useReducer(planetReducer, initialPlanets);\n//   const clicked = useRef(false);\n//   return (\n//     <PlanetStateContext.Provider value={state}>\n//       <PlanetDispatchContext.Provider value={dispatch}>\n//         {children}\n//       </PlanetDispatchContext.Provider>\n//     </PlanetStateContext.Provider>\n//   );\n// }\n// export function usePlanetState() {\n//   const context = useContext(PlanetStateContext);\n//   if (!context) {\n//     throw new Error('Cannot find PlanetProvider');\n//   }\n//   return context;\n// }\n// export function usePlanetDispatch() {\n//   const context = useContext(PlanetDispatchContext);\n//   if (!context) {\n//     throw new Error('Cannot find PlanetProvider');\n//   }\n//   return context;\n// }","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/PlanetContext.js"],"names":["React","useReducer","createContext","useContext","useRef","planetInfo","id","name","star","radius","color","velocity","orbitRadius","theta","Math","random","PI","x","window","innerWidth","y","innerHeight","mouseX","mouseY","clicked"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,UAA3C,EAAuDC,MAAvD,QAAqE,OAArE;AAEA,OAAO,MAAMC,UAAU,GAAG,CACxB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,KAFR;AAGEC,EAAAA,IAAI,EAAE,KAHR;AAIEC,EAAAA,MAAM,EAAE,EAJV;AAKEC,EAAAA,KAAK,EAAE,SALT;AAMEC,EAAAA,QAAQ,EAAE,CANZ;AAOEC,EAAAA,WAAW,EAAE,CAPf;AAQEC,EAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,EAArB,GAA0B,CARnC;AASEC,EAAAA,CAAC,EAAEC,MAAM,CAACC,UAAP,GAAkB,CATvB;AAUEC,EAAAA,CAAC,EAAEF,MAAM,CAACG,WAAP,GAAmB,CAVxB;AAWEC,EAAAA,MAAM,EAAEJ,MAAM,CAACC,UAAP,GAAkB,CAX5B;AAYEI,EAAAA,MAAM,EAAEL,MAAM,CAACG,WAAP,GAAmB,CAZ7B;AAaEG,EAAAA,OAAO,EAAE;AAbX,CADwB,EAgBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACElB,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,IAAI,EAAE,KAHR;AAIEC,EAAAA,MAAM,EAAE,EAJV;AAKEC,EAAAA,KAAK,EAAE,SALT;AAMEC,EAAAA,QAAQ,EAAE,KANZ;AAOEC,EAAAA,WAAW,EAAE,GAPf;AAQEC,EAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,EAArB,GAA0B,CARnC;AASEC,EAAAA,CAAC,EAAE,CATL;AAUEG,EAAAA,CAAC,EAAE,CAVL;AAWEE,EAAAA,MAAM,EAAE,CAXV;AAYEC,EAAAA,MAAM,EAAE,CAZV;AAaEC,EAAAA,OAAO,EAAE;AAbX,CAtCwB,EAqDxB;AACElB,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,IAAI,EAAE,OAHR;AAIEC,EAAAA,MAAM,EAAE,CAJV;AAKEC,EAAAA,KAAK,EAAE,SALT;AAMEC,EAAAA,QAAQ,EAAE,IANZ;AAOEC,EAAAA,WAAW,EAAE,EAPf;AAQEC,EAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,EAArB,GAA0B,CARnC;AASEC,EAAAA,CAAC,EAAE,CATL;AAUEG,EAAAA,CAAC,EAAE,CAVL;AAWEE,EAAAA,MAAM,EAAE,CAXV;AAYEC,EAAAA,MAAM,EAAE,CAZV;AAaEC,EAAAA,OAAO,EAAE;AAbX,CArDwB,CAoExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHwB,CAAnB,C,CAmHP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nexport const planetInfo = [\n  {\n    id: 0,\n    name: 'sun',\n    star: 'sun',\n    radius: 80,\n    color: '#FFF599',\n    velocity: 0,\n    orbitRadius: 0,\n    theta: Math.random() * Math.PI * 2,\n    x: window.innerWidth/2,\n    y: window.innerHeight/2,\n    mouseX: window.innerWidth/2,\n    mouseY: window.innerHeight/2,\n    clicked: false,\n  },\n  // {\n  //   id: 1,\n  //   name: 'mercury',\n  //   star: 'sun',\n  //   radius: 5,\n  //   color: '#74B1E9',\n  //   velocity: 0.008,\n  //   orbitRadius: 120,\n  //   x: 0,\n  //   y: 0,\n  // },\n  // {\n  //   id: 2,\n  //   name: 'venus',\n  //   star: 'sun',\n  //   radius: 11,\n  //   color: '#F3E6B7',\n  //   velocity: 0.005,\n  //   orbitRadius: 142,\n  //   x: 0,\n  //   y: 0,\n  // },\n  {\n    id: 3,\n    name: 'earth',\n    star: 'sun',\n    radius: 13,\n    color: '#AAE7F0',\n    velocity: 0.006,\n    orbitRadius: 172,\n    theta: Math.random() * Math.PI * 2,\n    x: 0,\n    y: 0,\n    mouseX: 0,\n    mouseY: 0,\n    clicked: false,\n  },\n  {\n    id: 4,\n    name: 'moon',\n    star: 'earth',\n    radius: 4,\n    color: '#F0F7F8',\n    velocity: 0.02,\n    orbitRadius: 28,\n    theta: Math.random() * Math.PI * 2,\n    x: 0,\n    y: 0,\n    mouseX: 0,\n    mouseY: 0,\n    clicked: false,\n  },\n  // {\n  //   id: 5,\n  //   name: 'mars',\n  //   star: 'sun',\n  //   radius: 6,\n  //   color: '#F39999',\n  //   velocity: 0.007,\n  //   orbitRadius: 219,\n  // },\n  // {\n  //   id: 6,\n  //   name: 'jupiter',\n  //   star: 'sun',\n  //   radius: 28,\n  //   color: '#B3D8A1',\n  //   velocity: 0.004,\n  //   orbitRadius: 260,\n  // },\n  // {\n  //   id: 7,\n  //   name: 'saturn',\n  //   star: 'sun',\n  //   radius: 24,\n  //   color: '#E3AE90',\n  //   velocity: 0.0035,\n  //   orbitRadius: 310,\n  // },\n  // {\n  //   id: 8,\n  //   name: 'uranus',\n  //   star: 'sun',\n  //   radius: 18,\n  //   color: '#8C7E75',\n  //   velocity: 0.003,\n  //   orbitRadius: 357,\n  // },\n  // {\n  //   id: 9,\n  //   name: 'neptune',\n  //   star: 'sun',\n  //   radius: 16,\n  //   color: '#A888BB',\n  //   velocity: 0.002,\n  //   orbitRadius: 396,\n  // },\n];\n\n// function planetReducer(state, action) {\n//   switch (action.type) {\n//     case 'ANIMATE':\n//       return state.map(planet =>\n//         planet.name === action.name ? { ...planet, x: action.x, y: action.y} : planet\n//       );\n//     case 'CLICK':\n//       return state.map(planet =>\n//         planet.name === action.name ? { ...planet, clicked: !planet.clicked} : planet\n//       );\n//     case 'DRAG':\n//       return state.map(planet =>\n//         planet.name === action.name ? { ...planet, mouseX: action.mouseX, mouxeY: action.mouseY} : planet\n//       );\n//     default:\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//   }\n// }\n\n// const PlanetStateContext = createContext();\n// const PlanetDispatchContext = createContext();\n\n// export function PlanetProvider({children}) {\n//   const [state, dispatch] = useReducer(planetReducer, initialPlanets);\n//   const clicked = useRef(false);\n\n//   return (\n//     <PlanetStateContext.Provider value={state}>\n//       <PlanetDispatchContext.Provider value={dispatch}>\n//         {children}\n//       </PlanetDispatchContext.Provider>\n//     </PlanetStateContext.Provider>\n//   );\n// }\n\n// export function usePlanetState() {\n//   const context = useContext(PlanetStateContext);\n\n//   if (!context) {\n//     throw new Error('Cannot find PlanetProvider');\n//   }\n\n//   return context;\n// }\n\n// export function usePlanetDispatch() {\n//   const context = useContext(PlanetDispatchContext);\n\n//   if (!context) {\n//     throw new Error('Cannot find PlanetProvider');\n//   }\n\n//   return context;\n// }"]},"metadata":{},"sourceType":"module"}