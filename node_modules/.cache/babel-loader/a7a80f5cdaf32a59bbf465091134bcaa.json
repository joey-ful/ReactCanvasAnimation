{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\n\nconst useCanvas = (draw, type) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let stageWidth = window.innerWidth;\n    let stageHeight = window.innerHeight;\n\n    const resize = () => {\n      const ratio = window.devicePixelRatio;\n      stageWidth = window.innerWidth;\n      stageHeight = window.innerHeight;\n      canvas.width = stageWidth * ratio;\n      canvas.height = stageHeight * ratio;\n      canvas.style.width = stageWidth + 'px';\n      canvas.style.height = stageHeight + 'px';\n      canvas.style.position = 'absolute';\n      document.body.style.margin = '0';\n      ctx.scale(ratio, ratio);\n      window.addEventListener('resize', resize);\n    };\n\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(ctx, frameCount, stageWidth, stageHeight); // if (type === 'dynamic') {\n      //   animationFrameId = window.requestAnimationFrame(render);\n      // }\n    };\n\n    render();\n    resize();\n    return () => {\n      if (type === 'dynamic') {\n        window.cancelAnimationFrame(animationFrameId);\n      }\n\n      window.removeEventListener('resize', resize);\n    };\n  }, [draw, type]);\n  return canvasRef;\n};\n\n_s(useCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\nexport default useCanvas;","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/Hooks/useCanvas.js"],"names":["useRef","useEffect","useCanvas","draw","type","canvasRef","canvas","current","ctx","getContext","stageWidth","window","innerWidth","stageHeight","innerHeight","resize","ratio","devicePixelRatio","width","height","style","position","document","body","margin","scale","addEventListener","frameCount","animationFrameId","render","cancelAnimationFrame","removeEventListener"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAEA,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AAChC,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAIC,UAAU,GAAGC,MAAM,CAACC,UAAxB;AACA,QAAIC,WAAW,GAAGF,MAAM,CAACG,WAAzB;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnB,YAAMC,KAAK,GAAGL,MAAM,CAACM,gBAArB;AAEAP,MAAAA,UAAU,GAAGC,MAAM,CAACC,UAApB;AACAC,MAAAA,WAAW,GAAGF,MAAM,CAACG,WAArB;AAEAR,MAAAA,MAAM,CAACY,KAAP,GAAeR,UAAU,GAAGM,KAA5B;AACAV,MAAAA,MAAM,CAACa,MAAP,GAAgBN,WAAW,GAAGG,KAA9B;AAEAV,MAAAA,MAAM,CAACc,KAAP,CAAaF,KAAb,GAAqBR,UAAU,GAAG,IAAlC;AACAJ,MAAAA,MAAM,CAACc,KAAP,CAAaD,MAAb,GAAsBN,WAAW,GAAG,IAApC;AACAP,MAAAA,MAAM,CAACc,KAAP,CAAaC,QAAb,GAAwB,UAAxB;AACAC,MAAAA,QAAQ,CAACC,IAAT,CAAcH,KAAd,CAAoBI,MAApB,GAA6B,GAA7B;AAEAhB,MAAAA,GAAG,CAACiB,KAAJ,CAAUT,KAAV,EAAiBA,KAAjB;AAEAL,MAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkCX,MAAlC;AACD,KAjBD;;AAmBA,QAAIY,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnBF,MAAAA,UAAU;AACVxB,MAAAA,IAAI,CAACK,GAAD,EAAMmB,UAAN,EAAkBjB,UAAlB,EAA8BG,WAA9B,CAAJ,CAFmB,CAInB;AACA;AACA;AACD,KAPD;;AAQAgB,IAAAA,MAAM;AACNd,IAAAA,MAAM;AAEN,WAAO,MAAM;AACX,UAAIX,IAAI,KAAK,SAAb,EAAwB;AACtBO,QAAAA,MAAM,CAACmB,oBAAP,CAA4BF,gBAA5B;AACD;;AACDjB,MAAAA,MAAM,CAACoB,mBAAP,CAA2B,QAA3B,EAAqChB,MAArC;AACD,KALD;AAMD,GA7CQ,EA6CN,CAACZ,IAAD,EAAOC,IAAP,CA7CM,CAAT;AA+CA,SAAOC,SAAP;AACD,CAnDD;;GAAMH,S;;AAqDN,eAAeA,SAAf","sourcesContent":["import { useRef, useEffect } from 'react';\n\nconst useCanvas = (draw, type) => {\n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let stageWidth = window.innerWidth;\n    let stageHeight = window.innerHeight;\n    \n    const resize = () => {\n      const ratio = window.devicePixelRatio;\n\n      stageWidth = window.innerWidth;\n      stageHeight = window.innerHeight;\n\n      canvas.width = stageWidth * ratio;\n      canvas.height = stageHeight * ratio;\n\n      canvas.style.width = stageWidth + 'px';\n      canvas.style.height = stageHeight + 'px';\n      canvas.style.position = 'absolute';\n      document.body.style.margin = '0';\n\n      ctx.scale(ratio, ratio);\n      \n      window.addEventListener('resize', resize);\n    }\n\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(ctx, frameCount, stageWidth, stageHeight);\n      \n      // if (type === 'dynamic') {\n      //   animationFrameId = window.requestAnimationFrame(render);\n      // }\n    }\n    render();\n    resize();\n    \n    return () => {\n      if (type === 'dynamic') {\n        window.cancelAnimationFrame(animationFrameId);\n      }\n      window.removeEventListener('resize', resize);\n    }\n  }, [draw, type]);\n  \n  return canvasRef\n}\n\nexport default useCanvas;"]},"metadata":{},"sourceType":"module"}