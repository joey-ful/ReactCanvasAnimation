{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // import Planet from './Planet.js';\n\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch();\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      update(planet, planets);\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  };\n\n  const update = (planet, planets) => {\n    planet.theta += planet.velocity;\n    let updatedX;\n    let updatedY;\n\n    if (planet.clicked) {\n      updatedX = planet.mouseX;\n      updatedY = planet.mouseY;\n    } else {\n      let star = planets.find(element => element.name === planet.star);\n      updatedX = star.x + planet.orbitRadius * Math.cos(planet.theta);\n      updatedY = star.y + planet.orbitRadius * Math.sin(planet.theta);\n    }\n\n    dispatch({\n      type: 'ANIMATE',\n      name: planet.name,\n      x: updatedX,\n      y: updatedY\n    });\n    console.log(planet.x, planet.y);\n  };\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    draw: drawSolarSystem,\n    id: \"main\",\n    type: \"dynamic\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SolarSystem, \"MhLTFKSUjxQdZT6YyNRJVGSnOXA=\", false, function () {\n  return [usePlanetState, usePlanetDispatch];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js"],"names":["React","usePlanetState","usePlanetDispatch","Canvas","SolarSystem","planets","dispatch","drawSolarSystem","ctx","stageWidth","stageHeight","clearRect","planet","update","draw","radius","color","x","y","theta","velocity","updatedX","updatedY","clicked","mouseX","mouseY","star","find","element","name","orbitRadius","Math","cos","sin","type","console","log","beginPath","arc","PI","fillStyle","fill","closePath"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,oBAAlD;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,OAAO,GAAGJ,cAAc,EAA9B;AACA,QAAMK,QAAQ,GAAGJ,iBAAiB,EAAlC;;AAEA,QAAMK,eAAe,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,WAAlB,KAAkC;AACxDF,IAAAA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBD,WAApB,EAAiCA,WAAjC;;AAEA,SAAK,IAAIE,MAAT,IAAmBP,OAAnB,EAA4B;AAC1BQ,MAAAA,MAAM,CAACD,MAAD,EAASP,OAAT,CAAN;AACAS,MAAAA,IAAI,CAACN,GAAD,EAAMI,MAAM,CAACG,MAAb,EAAqBH,MAAM,CAACI,KAA5B,EAAmCJ,MAAM,CAACK,CAA1C,EAA6CL,MAAM,CAACM,CAApD,CAAJ;AACD;AACF,GAPD;;AASA,QAAML,MAAM,GAAG,CAACD,MAAD,EAASP,OAAT,KAAqB;AAClCO,IAAAA,MAAM,CAACO,KAAP,IAAgBP,MAAM,CAACQ,QAAvB;AACA,QAAIC,QAAJ;AACA,QAAIC,QAAJ;;AAEA,QAAIV,MAAM,CAACW,OAAX,EAAoB;AAClBF,MAAAA,QAAQ,GAAGT,MAAM,CAACY,MAAlB;AACAF,MAAAA,QAAQ,GAAGV,MAAM,CAACa,MAAlB;AACD,KAHD,MAGO;AACL,UAAIC,IAAI,GAAGrB,OAAO,CAACsB,IAAR,CAAaC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiBjB,MAAM,CAACc,IAAhD,CAAX;AAEAL,MAAAA,QAAQ,GAAGK,IAAI,CAACT,CAAL,GAASL,MAAM,CAACkB,WAAP,GAAqBC,IAAI,CAACC,GAAL,CAASpB,MAAM,CAACO,KAAhB,CAAzC;AACAG,MAAAA,QAAQ,GAAGI,IAAI,CAACR,CAAL,GAASN,MAAM,CAACkB,WAAP,GAAqBC,IAAI,CAACE,GAAL,CAASrB,MAAM,CAACO,KAAhB,CAAzC;AACD;;AAEDb,IAAAA,QAAQ,CAAC;AACP4B,MAAAA,IAAI,EAAE,SADC;AAEPL,MAAAA,IAAI,EAAEjB,MAAM,CAACiB,IAFN;AAGPZ,MAAAA,CAAC,EAAEI,QAHI;AAIPH,MAAAA,CAAC,EAAEI;AAJI,KAAD,CAAR;AAMAa,IAAAA,OAAO,CAACC,GAAR,CAAYxB,MAAM,CAACK,CAAnB,EAAsBL,MAAM,CAACM,CAA7B;AACD,GAtBD;;AAwBA,QAAMJ,IAAI,GAAG,CAACN,GAAD,EAAMO,MAAN,EAAcC,KAAd,EAAqBC,CAArB,EAAwBC,CAAxB,KAA8B;AACzCV,IAAAA,GAAG,CAAC6B,SAAJ;AACA7B,IAAAA,GAAG,CAAC8B,GAAJ,CAAQrB,CAAR,EAAWC,CAAX,EAAcH,MAAd,EAAsB,CAAtB,EAAyBgB,IAAI,CAACQ,EAAL,GAAU,CAAnC;AACA/B,IAAAA,GAAG,CAACgC,SAAJ,GAAgBxB,KAAhB;AACAR,IAAAA,GAAG,CAACiC,IAAJ;AACAjC,IAAAA,GAAG,CAACkC,SAAJ;AACD,GAND;;AASA,sBACE,QAAC,MAAD;AACE,IAAA,IAAI,EAAEnC,eADR;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GArDuBH,W;UACNH,c,EACCC,iB;;;KAFKE,W","sourcesContent":["import React from 'react';\n// import Planet from './Planet.js';\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\n\nexport default function SolarSystem() {\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch();\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      update(planet, planets);\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  }\n\n  const update = (planet, planets) => {\n    planet.theta += planet.velocity;\n    let updatedX;\n    let updatedY;\n\n    if (planet.clicked) {\n      updatedX = planet.mouseX;\n      updatedY = planet.mouseY;\n    } else {\n      let star = planets.find(element => element.name === planet.star);\n\n      updatedX = star.x + planet.orbitRadius * Math.cos(planet.theta);\n      updatedY = star.y + planet.orbitRadius * Math.sin(planet.theta);\n    }\n\n    dispatch({\n      type: 'ANIMATE',\n      name: planet.name,\n      x: updatedX,\n      y: updatedY,\n    });\n    console.log(planet.x, planet.y);\n  }\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n\n  return (\n    <Canvas \n      draw={drawSolarSystem} \n      id='main' \n      type='dynamic' \n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}