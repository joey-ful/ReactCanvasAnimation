{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/RadioContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useContext, createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialRadio = [{\n  type: 'dragTypes',\n  options: [{\n    name: 'no-drag',\n    checked: true\n  }, {\n    name: 'basic-drag',\n    checked: false\n  }, {\n    name: 'elastic-drag',\n    checked: false\n  }]\n}, {\n  radioType: 'shadowTypes',\n  options: [{\n    name: 'no-shadow',\n    checked: true\n  }, {\n    name: 'rectangular-shadow',\n    checked: false\n  }, {\n    name: 'round-shadow',\n    checked: false\n  }]\n}];\n\nfunction radioReducer(state, action) {\n  switch (action.type) {\n    // case 'RADIO':\n    // return state.map(radio =>\n    //   (radio.name === action.name) ? { 'no-drag': false, 'basic-drag': false, 'elastic-drag': false } : radio\n    // );\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst RadioStateContext = /*#__PURE__*/createContext();\nconst RadioDispatchContext = /*#__PURE__*/createContext();\nexport function RadioProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(radioReducer, initialRadio);\n  return /*#__PURE__*/_jsxDEV(RadioStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(RadioDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RadioProvider, \"JQ5PDu3Q3hDgSyy0iMQdIp/2qZk=\");\n\n_c = RadioProvider;\nexport function useRadioState() {\n  _s2();\n\n  const context = useContext(RadioStateContext);\n\n  if (!context) {\n    throw new Error('Cannot find RadioProvider');\n  }\n\n  return context;\n}\n\n_s2(useRadioState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useRadioDispatch() {\n  _s3();\n\n  const context = useContext(RadioDispatchContext);\n\n  if (!context) {\n    throw new Error('Cannot find RadioProvider');\n  }\n\n  return context;\n}\n\n_s3(useRadioDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"RadioProvider\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/RadioContext.js"],"names":["useContext","createContext","useReducer","initialRadio","type","options","name","checked","radioType","radioReducer","state","action","Error","RadioStateContext","RadioDispatchContext","RadioProvider","children","dispatch","useRadioState","context","useRadioDispatch"],"mappings":";;;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,UAApC,QAAsD,OAAtD;;AAEA,MAAMC,YAAY,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,OAAO,EAAE;AAFX,GADO,EAKP;AACED,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE;AAFX,GALO,EASP;AACED,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,OAAO,EAAE;AAFX,GATO;AAFX,CADiB,EAkBjB;AACEC,EAAAA,SAAS,EAAE,aADb;AAEEH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE;AAFX,GADO,EAKP;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEC,IAAAA,OAAO,EAAE;AAFX,GALO,EASP;AACED,IAAAA,IAAI,EAAC,cADP;AAEEC,IAAAA,OAAO,EAAE;AAFX,GATO;AAFX,CAlBiB,CAArB;;AAqCA,SAASE,YAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,UAAOA,MAAM,CAACP,IAAd;AACE;AACE;AACA;AACA;AACF;AACE,YAAM,IAAIQ,KAAJ,CAAW,0BAAyBD,MAAM,CAACP,IAAK,EAAhD,CAAN;AANJ;AAQD;;AAED,MAAMS,iBAAiB,gBAAGZ,aAAa,EAAvC;AACA,MAAMa,oBAAoB,gBAAGb,aAAa,EAA1C;AAEA,OAAO,SAASc,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAmC;AAAA;;AACxC,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBf,UAAU,CAACO,YAAD,EAAeN,YAAf,CAApC;AAEA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEO,KAAnC;AAAA,2BACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAEO,QAAtC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAVeD,a;;KAAAA,a;AAYhB,OAAO,SAASG,aAAT,GAAyB;AAAA;;AAC9B,QAAMC,OAAO,GAAGnB,UAAU,CAACa,iBAAD,CAA1B;;AACA,MAAI,CAACM,OAAL,EAAc;AACZ,UAAM,IAAIP,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,SAAOO,OAAP;AACD;;IANeD,a;;AAQhB,OAAO,SAASE,gBAAT,GAA4B;AAAA;;AACjC,QAAMD,OAAO,GAAGnB,UAAU,CAACc,oBAAD,CAA1B;;AACA,MAAI,CAACK,OAAL,EAAc;AACZ,UAAM,IAAIP,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,SAAOO,OAAP;AACD;;IANeC,gB","sourcesContent":["import { useContext, createContext, useReducer } from 'react';\n\nconst initialRadio = [\n    {\n      type: 'dragTypes',\n      options: [\n        {\n          name: 'no-drag',\n          checked: true,\n        },\n        {\n          name: 'basic-drag',\n          checked: false,\n        },\n        {\n          name: 'elastic-drag',\n          checked: false,\n        },\n      ]\n    },\n    {\n      radioType: 'shadowTypes',\n      options: [\n        {\n          name: 'no-shadow',\n          checked: true,\n        },\n        {\n          name: 'rectangular-shadow',\n          checked: false,\n        },\n        {\n          name:'round-shadow',\n          checked: false,\n        },\n      ],\n    },\n];\n\nfunction radioReducer(state, action) {\n  switch(action.type) {\n    // case 'RADIO':\n      // return state.map(radio =>\n      //   (radio.name === action.name) ? { 'no-drag': false, 'basic-drag': false, 'elastic-drag': false } : radio\n      // );\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst RadioStateContext = createContext();\nconst RadioDispatchContext = createContext();\n\nexport function RadioProvider({children}) {\n  const [state, dispatch] = useReducer(radioReducer, initialRadio);\n\n  return (\n    <RadioStateContext.Provider value={state}>\n      <RadioDispatchContext.Provider value={dispatch}>\n        {children}\n      </RadioDispatchContext.Provider>\n    </RadioStateContext.Provider>\n  );\n}\n\nexport function useRadioState() {\n  const context = useContext(RadioStateContext);\n  if (!context) {\n    throw new Error('Cannot find RadioProvider');\n  }\n  return context;\n}\n\nexport function useRadioDispatch() {\n  const context = useContext(RadioDispatchContext);\n  if (!context) {\n    throw new Error('Cannot find RadioProvider');\n  }\n  return context;\n}"]},"metadata":{},"sourceType":"module"}