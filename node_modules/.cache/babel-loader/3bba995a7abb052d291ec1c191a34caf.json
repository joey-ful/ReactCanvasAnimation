{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // import Planet from './Planet.js';\n\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch(); // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      update(planet, planets);\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  };\n\n  const update = (planet, planets) => {\n    planet.theta += planet.velocity;\n    let clientX;\n    let updatedY;\n    let updatedTheta = planet.theta;\n\n    if (planet.clicked) {\n      updatedX = planet.mouseX;\n      updatedY = planet.mouseY;\n    } else {\n      let star = planets.find(element => element.name === planet.star);\n      let updatedTheta = planet.theta + planet.velocity;\n      updatedX = star.x + planet.orbitRadius * Math.cos(updatedTheta);\n      updatedY = star.y + planet.orbitRadius * Math.sin(updatedTheta);\n    }\n\n    dispatch({\n      type: 'ANIMATE',\n      name: planet.name,\n      x: updatedX,\n      y: updatedY,\n      theta: updatedTheta\n    });\n  };\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const onMouseDown = e => {\n    for (let planet of planets) {\n      let offsetX = e.clientX - planet.x;\n      let offsetY = e.clientY - planet.y;\n\n      if (Math.abs(offsetX) <= planet.radius && Math.abs(offsetY) <= planet.radius) {\n        dispatch({\n          type: 'CLICK',\n          name: planet.name\n        });\n        planet.mouseX = e.clientX - offsetX;\n        planet.mouseY = e.clientY - offsetY;\n        window.addEventListener(\"mousemove\", () => onMouseMove(e, offsetX, offsetY));\n      }\n    }\n  };\n\n  const onMouseMove = (e, offsetX, offsetY) => {\n    for (let planet of planets) {\n      if (planet.clicked) {\n        dispatch({\n          type: 'DRAG',\n          name: planet.name,\n          mouseX: e.clientX - offsetX,\n          mouseY: e.clientY - offsetY\n        });\n      }\n    }\n  };\n\n  const restore = e => {\n    for (let planet of planets) {\n      if (planet.clicked) {\n        dispatch({\n          type: 'CLICK',\n          name: planet.name\n        });\n        window.removeEventListener('mousemove', onMouseMove);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    draw: drawSolarSystem,\n    id: \"main\",\n    type: \"dynamic\",\n    onMouseDown: onMouseDown,\n    onMouseUp: restore,\n    onMouseOut: restore\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SolarSystem, \"MhLTFKSUjxQdZT6YyNRJVGSnOXA=\", false, function () {\n  return [usePlanetState, usePlanetDispatch];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js"],"names":["React","usePlanetState","usePlanetDispatch","Canvas","SolarSystem","planets","dispatch","drawSolarSystem","ctx","stageWidth","stageHeight","clearRect","planet","update","draw","radius","color","x","y","theta","velocity","clientX","updatedY","updatedTheta","clicked","updatedX","mouseX","mouseY","star","find","element","name","orbitRadius","Math","cos","sin","type","beginPath","arc","PI","fillStyle","fill","closePath","onMouseDown","e","offsetX","offsetY","clientY","abs","window","addEventListener","onMouseMove","restore","removeEventListener"],"mappings":"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","sourcesContent":["import React from 'react';\n// import Planet from './Planet.js';\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\n\nexport default function SolarSystem() {\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch();\n  \n\n  // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      update(planet, planets);\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  }\n\n  const update = (planet, planets) => {\n    planet.theta += planet.velocity;\n    let clientX;\n    let updatedY;\n    let updatedTheta = planet.theta;\n\n    if (planet.clicked) {\n      updatedX = planet.mouseX;\n      updatedY = planet.mouseY;\n    } else {\n      let star = planets.find(element => element.name === planet.star);\n      let updatedTheta = planet.theta + planet.velocity;\n\n      updatedX = star.x + planet.orbitRadius * Math.cos(updatedTheta);\n      updatedY = star.y + planet.orbitRadius * Math.sin(updatedTheta);\n    }\n\n    dispatch({\n      type: 'ANIMATE',\n      name: planet.name,\n      x: updatedX,\n      y: updatedY,\n      theta: updatedTheta,\n    });\n  }\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const onMouseDown = e => {\n    for (let planet of planets) {\n      let offsetX = e.clientX - planet.x;\n      let offsetY = e.clientY - planet.y;\n\n      if (\n        Math.abs(offsetX) <= planet.radius &&\n        Math.abs(offsetY) <= planet.radius\n      ) {\n        dispatch({\n          type: 'CLICK',\n          name: planet.name,\n        });\n        planet.mouseX = e.clientX - offsetX;\n        planet.mouseY = e.clientY - offsetY;\n        window.addEventListener(\"mousemove\", () => onMouseMove(e, offsetX, offsetY));\n      }\n    }\n  }\n\n  const onMouseMove = (e, offsetX, offsetY) => {\n    for (let planet of planets) {\n      if (planet.clicked) {\n        dispatch({\n          type: 'DRAG',\n          name: planet.name,\n          mouseX: e.clientX - offsetX,\n          mouseY: e.clientY - offsetY,\n        })\n      }\n    }\n  }\n\n  const restore = e => {\n    for (let planet of planets) {\n      if (planet.clicked) {\n        dispatch({\n          type: 'CLICK',\n          name: planet.name,\n        })\n        window.removeEventListener('mousemove', onMouseMove);\n      }\n    }\n  }\n\n  return (\n    <Canvas \n      draw={drawSolarSystem} \n      id='main' \n      type='dynamic' \n      onMouseDown={onMouseDown} \n      onMouseUp={restore} \n      onMouseOut={restore}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}