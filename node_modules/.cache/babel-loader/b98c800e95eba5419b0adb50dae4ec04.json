{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // import Planet from './Planet.js';\n\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch(); // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      update(planet, planets);\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  };\n\n  const update = (planet, planets) => {\n    planet.theta += planet.velocity;\n    let star = planets.find(element => element.name === planet.star);\n    let updatedX;\n    let updatedY;\n    let updatedTheta = planet.theta;\n\n    if (planet.clicked) {\n      updatedX = planet.mouseX;\n      updatedY = planet.mouseY;\n    } else {\n      updatedTheta = planet.theta + planet.velocity;\n      updatedX = star.x + planet.orbitRadius * Math.cos(updatedTheta);\n      updatedY = star.y + planet.orbitRadius * Math.sin(updatedTheta);\n    }\n\n    dispatch({\n      type: 'ANIMATE',\n      name: planet.name,\n      x: updatedX,\n      y: updatedY,\n      theta: updatedTheta\n    });\n  };\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const onMouseDown = e => {\n    for (let planet of planets) {\n      let offsetX = e.clientX - planet.x;\n      let offsetY = e.clientY - planet.y;\n\n      if (Math.abs(offsetX) <= planet.radius && Math.abs(offsetY) <= planet.radius) {\n        console.log(\"click\");\n        dispatch({\n          type: 'CLICK',\n          name: planet.name\n        });\n        planet.mouseX = e.clientX - offsetX;\n        planet.mouseY = e.clientY - offsetY;\n        window.addEventListener(\"mousemove\", () => onMouseMove(e, offsetX, offsetY));\n      }\n    }\n  };\n\n  const onMouseMove = (e, offsetX, offsetY) => {\n    console.log('mousemove', planet.clicked);\n\n    for (let planet of planets) {\n      if (planet.clicked) {\n        console.log('drag');\n        dispatch({\n          type: 'DRAG',\n          name: planet.name,\n          mouseX: e.clientX - offsetX,\n          mouseY: e.clientY - offsetY\n        });\n      }\n    }\n  };\n\n  const restore = e => {\n    for (let planet of planets) {\n      if (planet.clicked) {\n        dispatch({\n          type: 'CLICK',\n          name: planet.name\n        });\n        window.removeEventListener('mousemove', onMouseMove);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    draw: drawSolarSystem,\n    id: \"main\",\n    type: \"dynamic\",\n    onMouseDown: onMouseDown,\n    onMouseUp: restore,\n    onMouseOut: restore\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SolarSystem, \"MhLTFKSUjxQdZT6YyNRJVGSnOXA=\", false, function () {\n  return [usePlanetState, usePlanetDispatch];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js"],"names":["React","usePlanetState","usePlanetDispatch","Canvas","SolarSystem","planets","dispatch","drawSolarSystem","ctx","stageWidth","stageHeight","clearRect","planet","update","draw","radius","color","x","y","theta","velocity","star","find","element","name","updatedX","updatedY","updatedTheta","clicked","mouseX","mouseY","orbitRadius","Math","cos","sin","type","beginPath","arc","PI","fillStyle","fill","closePath","onMouseDown","e","offsetX","clientX","offsetY","clientY","abs","console","log","window","addEventListener","onMouseMove","restore","removeEventListener"],"mappings":"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","sourcesContent":["import React from 'react';\n// import Planet from './Planet.js';\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\n\nexport default function SolarSystem() {\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch();\n  \n\n  // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      update(planet, planets);\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  }\n\n  const update = (planet, planets) => {\n    planet.theta += planet.velocity;\n    let star = planets.find(element => element.name === planet.star);\n    let updatedX;\n    let updatedY;\n    let updatedTheta = planet.theta;\n\n    if (planet.clicked) {\n      updatedX = planet.mouseX;\n      updatedY = planet.mouseY;\n    } else {\n      updatedTheta = planet.theta + planet.velocity;\n\n      updatedX = star.x + planet.orbitRadius * Math.cos(updatedTheta);\n      updatedY = star.y + planet.orbitRadius * Math.sin(updatedTheta);\n    }\n\n    dispatch({\n      type: 'ANIMATE',\n      name: planet.name,\n      x: updatedX,\n      y: updatedY,\n      theta: updatedTheta,\n    });\n  }\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const onMouseDown = e => {\n    for (let planet of planets) {\n      let offsetX = e.clientX - planet.x;\n      let offsetY = e.clientY - planet.y;\n\n      if (\n        Math.abs(offsetX) <= planet.radius &&\n        Math.abs(offsetY) <= planet.radius\n      ) {\n        console.log(\"click\");\n        dispatch({\n          type: 'CLICK',\n          name: planet.name,\n        });\n        planet.mouseX = e.clientX - offsetX;\n        planet.mouseY = e.clientY - offsetY;\n        window.addEventListener(\"mousemove\", () => onMouseMove(e, offsetX, offsetY));\n      }\n    }\n  }\n\n  const onMouseMove = (e, offsetX, offsetY) => {\n    console.log('mousemove', planet.clicked);\n    for (let planet of planets) {\n      if (planet.clicked) {\n        console.log('drag')\n        dispatch({\n          type: 'DRAG',\n          name: planet.name,\n          mouseX: e.clientX - offsetX,\n          mouseY: e.clientY - offsetY,\n        })\n      }\n    }\n  }\n\n  const restore = e => {\n    for (let planet of planets) {\n      if (planet.clicked) {\n        dispatch({\n          type: 'CLICK',\n          name: planet.name,\n        })\n        window.removeEventListener('mousemove', onMouseMove);\n      }\n    }\n  }\n\n  return (\n    <Canvas \n      draw={drawSolarSystem} \n      id='main' \n      type='dynamic' \n      onMouseDown={onMouseDown} \n      onMouseUp={restore} \n      onMouseOut={restore}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}