{"ast":null,"code":"export default class Planet {\n  constructor(name, star, radius, color, velocity, orbitRadius) {\n    this.onMouseDown = (e, canvas) => {\n      this.offsetX = e.clientX - this.x;\n      this.offsetY = e.clientY - this.y;\n\n      if (Math.abs(this.offsetX) <= this.radius && Math.abs(this.offsetY) <= this.radius) {\n        this.clicked = true;\n        canvas.addEventListener('mousemove', this.onMouseMove);\n      }\n    };\n\n    this.onMouseMove = e => {\n      this.mouse.x = e.clientX - this.offsetX;\n      this.mouse.y = e.clientY - this.offsetY;\n    };\n\n    this.restore = canvas => {\n      if (this.clicked && this.name !== 'sun') {\n        this.clicked = false;\n        this.orbitRadius = Math.sqrt(Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2));\n        this.theta = Math.acos((this.x - this.star.x) / this.orbitRadius);\n\n        if (this.y - this.star.y < 0) {\n          this.theta = 2 * Math.PI - this.theta;\n        }\n\n        canvas.removeEventListener('mousemove', this.onMouseMove);\n      } else if (this.clicked && this.name === 'sun') {\n        this.clicked = false;\n        this.star.x = this.x;\n        this.star.y = this.y;\n        canvas.removeEventListener('mousemove', this.onMouseMove);\n      }\n\n      canvas.removeEventListener('mousedown', this.onMouseDown);\n    };\n\n    this.name = name;\n    this.star = star;\n    this.radius = radius;\n    this.color = color;\n    this.velocity = velocity;\n    this.orbitRadius = orbitRadius;\n    this.theta = Math.random() * Math.PI * 2;\n    this.clicked = false;\n    this.mouse = {\n      x: star.x,\n      y: star.y\n    };\n    this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n    this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    console.log(star);\n  }\n\n  update(ctx, canvas) {\n    // this.interaction(canvas);\n    this.theta += this.velocity;\n\n    if (this.clicked) {\n      this.x = this.mouse.x;\n      this.y = this.mouse.y;\n    } else {\n      this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    }\n\n    this.draw(ctx);\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  interaction(canvas) {\n    canvas.addEventListener('mousedown', e => this.onMouseDown(e, canvas));\n    canvas.addEventListener('mouseup', () => this.restore(canvas));\n    canvas.addEventListener('mouseout', () => this.restore(canvas));\n  }\n\n}","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/Planet.js"],"names":["Planet","constructor","name","star","radius","color","velocity","orbitRadius","onMouseDown","e","canvas","offsetX","clientX","x","offsetY","clientY","y","Math","abs","clicked","addEventListener","onMouseMove","mouse","restore","sqrt","pow","theta","acos","PI","removeEventListener","random","cos","sin","console","log","update","ctx","draw","beginPath","arc","fillStyle","fill","closePath","interaction"],"mappings":"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","sourcesContent":["export default class Planet {\n  constructor(name, star, radius, color, velocity, orbitRadius) {\n    this.name = name;\n    this.star = star;\n    this.radius = radius;\n    this.color = color;\n    this.velocity = velocity;\n    this.orbitRadius = orbitRadius;\n\n    this.theta = Math.random() * Math.PI * 2;\n    this.clicked = false;\n\n    this.mouse = {\n      x: star.x,\n      y: star.y,\n    };\n\n    this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n\n    console.log(star);\n  }\n\n  update(ctx, canvas) {\n    // this.interaction(canvas);\n    this.theta += this.velocity;\n\n    if (this.clicked) {\n      this.x = this.mouse.x;\n      this.y = this.mouse.y;\n    } else {\n      this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    }\n\n    this.draw(ctx);\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  interaction(canvas) {\n    canvas.addEventListener('mousedown', (e) => this.onMouseDown(e, canvas));\n    canvas.addEventListener('mouseup', () => this.restore(canvas));\n    canvas.addEventListener('mouseout', () => this.restore(canvas));\n  }\n\n  onMouseDown = (e, canvas) => {\n    this.offsetX = e.clientX - this.x;\n    this.offsetY = e.clientY - this.y;\n\n    if (\n      Math.abs(this.offsetX) <= this.radius &&\n      Math.abs(this.offsetY) <= this.radius\n    ) {\n      this.clicked = true;\n      canvas.addEventListener('mousemove', this.onMouseMove);\n    }\n  };\n\n  onMouseMove = (e) => {\n    this.mouse.x = e.clientX - this.offsetX;\n    this.mouse.y = e.clientY - this.offsetY;\n  };\n\n  restore = canvas => {\n    if (this.clicked && this.name !== 'sun') {\n      this.clicked = false;\n      \n      this.orbitRadius = Math.sqrt(\n        Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2)\n      );\n\n      this.theta = Math.acos((this.x - this.star.x) / this.orbitRadius);\n\n      if (this.y - this.star.y < 0) {\n        this.theta = 2 * Math.PI - this.theta;\n      }\n      canvas.removeEventListener('mousemove', this.onMouseMove);\n    } else if (this.clicked && this.name === 'sun') {\n      this.clicked = false;\n      this.star.x = this.x;\n      this.star.y = this.y;\n      canvas.removeEventListener('mousemove', this.onMouseMove);\n    }\n    \n    canvas.removeEventListener('mousedown', this.onMouseDown);\n  };\n}"]},"metadata":{},"sourceType":"module"}