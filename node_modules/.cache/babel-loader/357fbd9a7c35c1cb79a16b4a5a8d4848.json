{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/components/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { planetInfo } from '../consts/PlanetInfo.js';\nimport Canvas from './Canvas.js';\nimport Planet from '../js/Planet.js';\nimport { useToggleState } from '../contexts/ToggleContext.js';\nimport { useRadioState } from '../contexts/RadioContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const toggleOptions = useToggleState();\n  const radioOptions = useRadioState();\n  const dragType = radioOptions[0].options.find(option => option.checked === true).name;\n  const shadowType = radioOptions[1].options.find(option => option.checked === true).name;\n  const backgroundToggle = toggleOptions.find(option => option.name === 'background').checked;\n  const orbitToggle = toggleOptions.find(option => option.name === 'orbit-path').checked;\n  const planetArtToggle = toggleOptions.find(option => option.name === 'planet-art').checked;\n  let planets = [];\n  let sun;\n  let earth;\n\n  for (let planet of planetInfo) {\n    if (planet.name === 'sun') {\n      let sunStar = {\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      };\n      sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(sun);\n    } else if (planet.name === 'earth') {\n      earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(earth);\n    } else {\n      if (planet.star === 'sun') {\n        planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      } else {\n        planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      }\n    }\n  } // const draw = (ctx, stageWidth, stageHeight) => {\n  //   ctx.clearRect(0, 0, stageWidth, stageHeight);\n  //   for (let planet of planets) {\n  //     planet.update(ctx, dragType, planetArtToggle);\n  //   }\n  // }\n\n\n  const draw = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n    let img = new Image(); // ctx.beginPath();\n    // ctx.arc(400, 400, 40, 0, Math.PI * 2);\n    // ctx.fillStyle = 'red';\n    // ctx.fill();\n\n    img.onload = () => {\n      ctx.drawImage(img, 200, 200, 80, 80);\n      requestAnimationFrame(animate);\n    };\n\n    const animate = () => {\n      ctx.drawImage(img, 200, 200, 80, 80);\n      requestAnimationFrame(animate);\n    };\n\n    img.src = `../images/sun.png`; // ctx.closePath();\n  };\n\n  const drawShadow = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.drawShadow(ctx, shadowType, planetArtToggle, backgroundToggle);\n    }\n  };\n\n  const drawPath = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    if (orbitToggle) {\n      for (let planet of planets) {\n        planet.drawOrbitPath(ctx);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      draw: draw,\n      id: \"main-canvas\",\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"path-canvas\",\n      draw: drawPath,\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"shadow-canvas\",\n      draw: drawShadow,\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SolarSystem, \"d67nsuLESzsGcVkQoax9mSwJXmc=\", false, function () {\n  return [useToggleState, useRadioState];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/components/SolarSystem.js"],"names":["React","planetInfo","Canvas","Planet","useToggleState","useRadioState","SolarSystem","toggleOptions","radioOptions","dragType","options","find","option","checked","name","shadowType","backgroundToggle","orbitToggle","planetArtToggle","planets","sun","earth","planet","sunStar","x","window","innerWidth","y","innerHeight","radius","color","velocity","orbitRadius","push","star","draw","ctx","stageWidth","stageHeight","clearRect","img","Image","onload","drawImage","requestAnimationFrame","animate","src","drawShadow","drawPath","drawOrbitPath"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { planetInfo } from '../consts/PlanetInfo.js';\nimport Canvas from './Canvas.js';\nimport Planet from '../js/Planet.js';\nimport { useToggleState } from '../contexts/ToggleContext.js';\nimport { useRadioState } from '../contexts/RadioContext.js';\n\nexport default function SolarSystem() {\n  const toggleOptions = useToggleState();\n  const radioOptions = useRadioState();\n  const dragType = radioOptions[0].options.find(option => option.checked === true).name;\n  const shadowType = radioOptions[1].options.find(option => option.checked === true).name;\n  const backgroundToggle = toggleOptions.find(option => option.name === 'background').checked;\n  const orbitToggle = toggleOptions.find(option => option.name === 'orbit-path').checked;\n  const planetArtToggle = toggleOptions.find(option => option.name === 'planet-art').checked;\n\n\n  \n\n\n  let planets = [];\n  let sun;\n  let earth;\n\n  for (let planet of planetInfo) {\n    if (planet.name === 'sun') {\n      let sunStar = {\n        x: window.innerWidth/2,\n        y: window.innerHeight/2,\n      }\n      sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(sun);\n    } else if (planet.name === 'earth') {\n      earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(earth);\n    } else {\n      if (planet.star === 'sun') {\n        planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      } else {\n        planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      }\n    }\n  }\n\n  // const draw = (ctx, stageWidth, stageHeight) => {\n  //   ctx.clearRect(0, 0, stageWidth, stageHeight);\n    \n  //   for (let planet of planets) {\n  //     planet.update(ctx, dragType, planetArtToggle);\n  //   }\n  // }\n\n  const draw = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    let img = new Image();\n    // ctx.beginPath();\n    // ctx.arc(400, 400, 40, 0, Math.PI * 2);\n    // ctx.fillStyle = 'red';\n    // ctx.fill();\n    img.onload = () => {\n      ctx.drawImage(img, 200, 200, 80, 80);\n      requestAnimationFrame(animate)\n    }\n    const animate = () => {\n      ctx.drawImage(img, 200, 200, 80, 80);\n      requestAnimationFrame(animate);\n    }\n    img.src = `../images/sun.png`;\n    // ctx.closePath();\n  }\n\n  const drawShadow = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.drawShadow(ctx, shadowType, planetArtToggle, backgroundToggle);\n    }\n  }\n\n  const drawPath = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n    if (orbitToggle) {\n      for (let planet of planets) {\n        planet.drawOrbitPath(ctx);\n      }\n    }\n  }\n\n  return (\n    <>\n      <Canvas \n        draw={draw} \n        id='main-canvas' \n        type='dynamic'\n      />\n      <Canvas id='path-canvas' draw={drawPath} type='dynamic'/>\n      <Canvas id='shadow-canvas' draw={drawShadow} type='dynamic'/>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}