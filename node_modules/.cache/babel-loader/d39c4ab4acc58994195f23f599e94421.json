{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/components/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { planetInfo } from '../consts/PlanetInfo.js';\nimport Canvas from './Canvas.js';\nimport Planet from '../js/Planet.js';\nimport { useToggleState } from '../contexts/ToggleContext.js';\nimport { useRadioState } from '../contexts/RadioContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const toggleOptions = useToggleState();\n  const radioOptions = useRadioState();\n  const orbitToggle = toggleOptions.find(option => option.name === 'orbit-path').checked;\n  const planetArtToggle = toggleOptions.find(option => option.name === 'planet-art').checked;\n  let planets = [];\n  let sun;\n  let earth;\n\n  for (let planet of planetInfo) {\n    if (planet.name === 'sun') {\n      let sunStar = {\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      };\n      sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(sun);\n    } else if (planet.name === 'earth') {\n      earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(earth);\n    } else {\n      if (planet.star === 'sun') {\n        planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      } else {\n        planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      }\n    }\n  }\n\n  const draw = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.update(ctx);\n    }\n  };\n\n  const drawShadow = (shadowctx, stageWidth, stageHeight) => {\n    shadowctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.drawShadow(shadowctx);\n    }\n  };\n\n  const drawPath = pathctx;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      draw: draw,\n      id: \"main\",\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"shadow\",\n      draw: drawShadow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SolarSystem, \"d67nsuLESzsGcVkQoax9mSwJXmc=\", false, function () {\n  return [useToggleState, useRadioState];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/components/SolarSystem.js"],"names":["React","planetInfo","Canvas","Planet","useToggleState","useRadioState","SolarSystem","toggleOptions","radioOptions","orbitToggle","find","option","name","checked","planetArtToggle","planets","sun","earth","planet","sunStar","x","window","innerWidth","y","innerHeight","radius","color","velocity","orbitRadius","push","star","draw","ctx","stageWidth","stageHeight","clearRect","update","drawShadow","shadowctx","drawPath","pathctx"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { planetInfo } from '../consts/PlanetInfo.js';\nimport Canvas from './Canvas.js';\nimport Planet from '../js/Planet.js';\nimport { useToggleState } from '../contexts/ToggleContext.js';\nimport { useRadioState } from '../contexts/RadioContext.js';\n\nexport default function SolarSystem() {\n  const toggleOptions = useToggleState();\n  const radioOptions = useRadioState();\n\n\n\n  const orbitToggle = toggleOptions.find(option => option.name === 'orbit-path').checked;\n  const planetArtToggle = toggleOptions.find(option => option.name === 'planet-art').checked;\n\n  let planets = [];\n  let sun;\n  let earth;\n\n  for (let planet of planetInfo) {\n    if (planet.name === 'sun') {\n      let sunStar = {\n        x: window.innerWidth/2,\n        y: window.innerHeight/2,\n      }\n      sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(sun);\n    } else if (planet.name === 'earth') {\n      earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius);\n      planets.push(earth);\n    } else {\n      if (planet.star === 'sun') {\n        planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      } else {\n        planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius));\n      }\n    }\n  }\n\n  const draw = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n    \n    for (let planet of planets) {\n      planet.update(ctx);\n    }\n  }\n\n  const drawShadow = (shadowctx, stageWidth, stageHeight) => {\n    shadowctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.drawShadow(shadowctx, )\n    }\n  }\n\n  const drawPath = (pathctx)\n\n  return (\n    <>\n    <Canvas \n      draw={draw} \n      id='main' \n      type='dynamic'\n    />\n    <Canvas id='shadow' draw={drawShadow} />\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}