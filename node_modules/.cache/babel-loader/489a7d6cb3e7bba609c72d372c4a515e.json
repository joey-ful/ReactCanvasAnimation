{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Planet from './Planet.js';\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch(); // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  };\n\n  const update = () => {};\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const onMouseDown = e => {\n    for (let planet of planets) {\n      let offsetX = e.clientX - planet.x;\n      let offsetY = e.clientY - planet.y;\n\n      if (Math.abs(offsetX) <= planet.radius && Math.abs(offsetY) <= planet.radius) {\n        planet.clicked = true;\n        planet.mouseX = e.clientX - offsetX;\n        planet.mouseY = e.clientY - offsetY;\n        window.addEventListener(\"mousemove\", () => onMouseMove(e, planet, offsetX, offsetY));\n      }\n    }\n  };\n\n  const onMouseMove = (e, planet, offsetX, offsetY) => {\n    planet.mouseX = e.clientX - offsetX;\n    planet.mouseY = e.clientY - offsetY; // console.log('planet', planet);\n\n    console.log('mousemove', planet.mouseX, planet.mouseY);\n  };\n\n  const restore = e => {\n    clicked.current = false;\n    window.removeEventListener('mousemove', onMouseMove);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    draw: drawSolarSystem,\n    id: \"main\",\n    type: \"dynamic\",\n    onMouseDown: onMouseDown,\n    onMouseUp: restore,\n    onMouseOut: restore\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SolarSystem, \"MhLTFKSUjxQdZT6YyNRJVGSnOXA=\", false, function () {\n  return [usePlanetState, usePlanetDispatch];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js"],"names":["React","Planet","usePlanetState","usePlanetDispatch","Canvas","SolarSystem","planets","dispatch","drawSolarSystem","ctx","stageWidth","stageHeight","clearRect","planet","draw","radius","color","x","y","update","beginPath","arc","Math","PI","fillStyle","fill","closePath","onMouseDown","e","offsetX","clientX","offsetY","clientY","abs","clicked","mouseX","mouseY","window","addEventListener","onMouseMove","console","log","restore","current","removeEventListener"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Planet from './Planet.js';\nimport { usePlanetState, usePlanetDispatch } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\n\nexport default function SolarSystem() {\n  const planets = usePlanetState();\n  const dispatch = usePlanetDispatch();\n  \n\n  // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const drawSolarSystem = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n \n\n      draw(ctx, planet.radius, planet.color, planet.x, planet.y);\n    }\n  }\n\n  const update = () => {\n\n  }\n\n  const draw = (ctx, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  const onMouseDown = e => {\n    for (let planet of planets) {\n      let offsetX = e.clientX - planet.x;\n      let offsetY = e.clientY - planet.y;\n\n      if (\n        Math.abs(offsetX) <= planet.radius &&\n        Math.abs(offsetY) <= planet.radius\n      ) {\n        planet.clicked = true;\n        planet.mouseX = e.clientX - offsetX;\n        planet.mouseY = e.clientY - offsetY;\n        \n        window.addEventListener(\"mousemove\", () => onMouseMove(e, planet, offsetX, offsetY));\n      }\n    }\n    \n  }\n\n  const onMouseMove = (e, planet, offsetX, offsetY) => {\n    planet.mouseX = e.clientX - offsetX;\n    planet.mouseY = e.clientY - offsetY;\n    // console.log('planet', planet);\n    console.log('mousemove', planet.mouseX, planet.mouseY);\n  }\n\n  const restore = e => {\n    clicked.current = false;\n    window.removeEventListener('mousemove', onMouseMove);\n    \n  }\n\n  return (\n    <Canvas \n      draw={drawSolarSystem} \n      id='main' \n      type='dynamic' \n      onMouseDown={onMouseDown} \n      onMouseUp={restore} \n      onMouseOut={restore}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}