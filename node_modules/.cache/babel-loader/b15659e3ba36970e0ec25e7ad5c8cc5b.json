{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Planet from './Planet.js';\nimport { usePlanetState } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem() {\n  _s();\n\n  const planets = usePlanetState(); // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const update = (ctx, frameCount, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      let star = planets.find(element => element.name === planet.star);\n      planet.theta += planet.velocity;\n      planet.x = sun.x + planet.orbitRadius * Math.cos(planet.theta);\n      planet.y = sun.y + planet.orbitRadius * Math.sin(planet.theta);\n      draw(ctx, frameCount, planet.radius, planet.color, planet.x, planet.y);\n    }\n  };\n\n  const draw = (ctx, frameCount, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    draw: update,\n    id: \"main\",\n    type: \"dynamic\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SolarSystem, \"HxuCNVO0z9lKOMhZbLyLUecIlUs=\", false, function () {\n  return [usePlanetState];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/SolarSystem.js"],"names":["React","Planet","usePlanetState","Canvas","SolarSystem","planets","update","ctx","frameCount","stageWidth","stageHeight","clearRect","planet","star","find","element","name","theta","velocity","x","sun","orbitRadius","Math","cos","y","sin","draw","radius","color","beginPath","arc","PI","fillStyle","fill","closePath"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,OAAO,GAAGH,cAAc,EAA9B,CADoC,CAGpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMI,MAAM,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,UAAlB,EAA8BC,WAA9B,KAA8C;AAC3DH,IAAAA,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBD,WAApB,EAAiCA,WAAjC;;AAEA,SAAK,IAAIE,MAAT,IAAmBP,OAAnB,EAA4B;AAC1B,UAAIQ,IAAI,GAAGR,OAAO,CAACS,IAAR,CAAaC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiBJ,MAAM,CAACC,IAAhD,CAAX;AACAD,MAAAA,MAAM,CAACK,KAAP,IAAgBL,MAAM,CAACM,QAAvB;AACAN,MAAAA,MAAM,CAACO,CAAP,GAAWC,GAAG,CAACD,CAAJ,GAAQP,MAAM,CAACS,WAAP,GAAqBC,IAAI,CAACC,GAAL,CAASX,MAAM,CAACK,KAAhB,CAAxC;AACAL,MAAAA,MAAM,CAACY,CAAP,GAAWJ,GAAG,CAACI,CAAJ,GAAQZ,MAAM,CAACS,WAAP,GAAqBC,IAAI,CAACG,GAAL,CAASb,MAAM,CAACK,KAAhB,CAAxC;AAEAS,MAAAA,IAAI,CAACnB,GAAD,EAAMC,UAAN,EAAkBI,MAAM,CAACe,MAAzB,EAAiCf,MAAM,CAACgB,KAAxC,EAA+ChB,MAAM,CAACO,CAAtD,EAAyDP,MAAM,CAACY,CAAhE,CAAJ;AACD;AACF,GAXD;;AAaA,QAAME,IAAI,GAAG,CAACnB,GAAD,EAAMC,UAAN,EAAkBmB,MAAlB,EAA0BC,KAA1B,EAAiCT,CAAjC,EAAoCK,CAApC,KAA0C;AACrDjB,IAAAA,GAAG,CAACsB,SAAJ;AACAtB,IAAAA,GAAG,CAACuB,GAAJ,CAAQX,CAAR,EAAWK,CAAX,EAAcG,MAAd,EAAsB,CAAtB,EAAyBL,IAAI,CAACS,EAAL,GAAU,CAAnC;AACAxB,IAAAA,GAAG,CAACyB,SAAJ,GAAgBJ,KAAhB;AACArB,IAAAA,GAAG,CAAC0B,IAAJ;AACA1B,IAAAA,GAAG,CAAC2B,SAAJ;AACD,GAND;;AAQA,sBACE,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAE5B,MAAd;AAAsB,IAAA,EAAE,EAAC,MAAzB;AAAgC,IAAA,IAAI,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GApCuBF,W;UACNF,c;;;KADME,W","sourcesContent":["import React from 'react';\nimport Planet from './Planet.js';\nimport { usePlanetState } from './PlanetContext.js';\nimport Canvas from './Canvas.js';\n\nexport default function SolarSystem() {\n  const planets = usePlanetState();\n\n  // const onDrag = e => {\n  //   dispatch({\n  //     type: 'DRAG',\n  //     orbitRadius: ,\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  // }\n\n  const update = (ctx, frameCount, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageHeight, stageHeight);\n\n    for (let planet of planets) {\n      let star = planets.find(element => element.name === planet.star);\n      planet.theta += planet.velocity;\n      planet.x = sun.x + planet.orbitRadius * Math.cos(planet.theta);\n      planet.y = sun.y + planet.orbitRadius * Math.sin(planet.theta);\n\n      draw(ctx, frameCount, planet.radius, planet.color, planet.x, planet.y);\n    }\n  }\n\n  const draw = (ctx, frameCount, radius, color, x, y) => {\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  return (\n    <Canvas draw={update} id='main' type='dynamic'/>\n  );\n}"]},"metadata":{},"sourceType":"module"}