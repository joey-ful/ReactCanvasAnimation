{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react'; // import useResize from '../ResizeCanvas.js';\n\nconst useCanvas = draw => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    const resize = () => {\n      // canvas.width = window.innerWidth;\n      // canvas.height = window.innerHeight;\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const ratio = window.devicePixelRatio;\n      canvas.width = width * ratio;\n      canvas.height = height * ratio;\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px'; //   canvas.style.width = '100%';\n      // canvas.style.height = '100%';\n\n      ctx.scale(ratio, ratio);\n      window.addEventListener('resize', resize);\n    };\n\n    const render = () => {\n      frameCount++; // ResizeCanvas(canvas, ctx);\n\n      draw(ctx, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    resize();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', resize);\n    };\n  }, [draw]);\n  return canvasRef;\n};\n\n_s(useCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\nexport default useCanvas;","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/react-canvas-animation/src/Hooks/useCanvas.js"],"names":["useRef","useEffect","useCanvas","draw","canvasRef","canvas","current","ctx","getContext","frameCount","animationFrameId","resize","width","window","innerWidth","height","innerHeight","ratio","devicePixelRatio","style","scale","addEventListener","render","requestAnimationFrame","cancelAnimationFrame","removeEventListener"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC,C,CACA;;AAEA,MAAMC,SAAS,GAAGC,IAAI,IAAI;AAAA;;AACxB,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnB;AACA;AACA,YAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,YAAMC,MAAM,GAAGF,MAAM,CAACG,WAAtB;AACA,YAAMC,KAAK,GAAGJ,MAAM,CAACK,gBAArB;AAEFb,MAAAA,MAAM,CAACO,KAAP,GAAeA,KAAK,GAAGK,KAAvB;AACAZ,MAAAA,MAAM,CAACU,MAAP,GAAgBA,MAAM,GAAGE,KAAzB;AACAZ,MAAAA,MAAM,CAACc,KAAP,CAAaP,KAAb,GAAqBA,KAAK,GAAG,IAA7B;AACAP,MAAAA,MAAM,CAACc,KAAP,CAAaJ,MAAb,GAAsBA,MAAM,GAAG,IAA/B,CAVqB,CAYvB;AACA;;AACER,MAAAA,GAAG,CAACa,KAAJ,CAAUH,KAAV,EAAiBA,KAAjB;AAEEJ,MAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCV,MAAlC;AACD,KAjBD;;AAmBA,UAAMW,MAAM,GAAG,MAAM;AACnBb,MAAAA,UAAU,GADS,CAEnB;;AACAN,MAAAA,IAAI,CAACI,GAAD,EAAME,UAAN,CAAJ;AACAC,MAAAA,gBAAgB,GAAGG,MAAM,CAACU,qBAAP,CAA6BD,MAA7B,CAAnB;AACD,KALD;;AAMAA,IAAAA,MAAM;AACNX,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACW,oBAAP,CAA4Bd,gBAA5B;AACAG,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCd,MAArC;AACD,KAHD;AAID,GAtCQ,EAsCN,CAACR,IAAD,CAtCM,CAAT;AAwCA,SAAOC,SAAP;AACD,CA5CD;;GAAMF,S;;AA8CN,eAAeA,SAAf","sourcesContent":["import { useRef, useEffect } from 'react';\n// import useResize from '../ResizeCanvas.js';\n\nconst useCanvas = draw => {\n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n    \n    const resize = () => {\n      // canvas.width = window.innerWidth;\n      // canvas.height = window.innerHeight;\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const ratio = window.devicePixelRatio;\n\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n\n  //   canvas.style.width = '100%';\n  // canvas.style.height = '100%';\n    ctx.scale(ratio, ratio);\n      \n      window.addEventListener('resize', resize);\n    }\n\n    const render = () => {\n      frameCount++;\n      // ResizeCanvas(canvas, ctx);\n      draw(ctx, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    }\n    render();\n    resize();\n    \n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', resize);\n    }\n  }, [draw]);\n  \n  return canvasRef\n}\n\nexport default useCanvas;"]},"metadata":{},"sourceType":"module"}