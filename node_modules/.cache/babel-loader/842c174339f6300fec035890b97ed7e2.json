{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/App.js\";\nimport React from 'react';\nimport SolarSystem from './components/SolarSystem.js';\nimport Background from './components/Background.js';\nimport CustomizationMenu from './components/CustomizaztionMenu.js';\nimport { RadioProvider } from './contexts/RadioContext.js';\nimport { ToggleProvider } from './contexts/ToggleContext.js';\nimport { planetInfo } from './consts/PlanetInfo.js';\nimport Planet from './js/Planet.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppProvider = ({\n  contexts,\n  children\n}) => contexts.reduce((prev, context) => /*#__PURE__*/React.createElement(context, {\n  children: prev\n}), children);\n\n_c = AppProvider;\n\nfunction App() {\n  let planets = [];\n  let sun;\n  let earth;\n\n  for (let planet of planetInfo) {\n    if (planet.name === 'sun') {\n      let sunStar = {\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      };\n      sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n      planets.push(sun);\n    } else if (planet.name === 'earth') {\n      earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n      planets.push(earth);\n    } else {\n      if (planet.star === 'sun') {\n        planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n      } else {\n        planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n      }\n    }\n  }\n\n  const createPlanet = star => {\n    let planet = new Planet();\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppProvider, {\n    contexts: [RadioProvider, ToggleProvider],\n    children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SolarSystem, {\n      planets: planets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomizationMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppProvider\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/App.js"],"names":["React","SolarSystem","Background","CustomizationMenu","RadioProvider","ToggleProvider","planetInfo","Planet","AppProvider","contexts","children","reduce","prev","context","createElement","App","planets","sun","earth","planet","name","sunStar","x","window","innerWidth","y","innerHeight","radius","color","velocity","orbitRadius","src","push","star","createPlanet"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SolarSystem from './components/SolarSystem.js';\nimport Background from './components/Background.js';\nimport CustomizationMenu from './components/CustomizaztionMenu.js';\nimport {RadioProvider} from './contexts/RadioContext.js';\nimport {ToggleProvider} from './contexts/ToggleContext.js';\nimport { planetInfo } from './consts/PlanetInfo.js';\nimport Planet from './js/Planet.js';\n\nconst AppProvider = ({contexts, children}) =>\n  contexts.reduce(\n    (prev, context) =>\n      React.createElement(context, {\n        children: prev,\n      }),\n    children\n  );\n\nfunction App() {\n  let planets = [];\n  let sun;\n  let earth;\n\n  for (let planet of planetInfo) {\n    if (planet.name === 'sun') {\n      let sunStar = {\n        x: window.innerWidth/2,\n        y: window.innerHeight/2,\n      }\n      sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n      planets.push(sun);\n    } else if (planet.name === 'earth') {\n      earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n      planets.push(earth);\n    } else {\n      if (planet.star === 'sun') {\n        planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n      } else {\n        planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n      }\n    }\n  }\n\n  const createPlanet = (star) => {\n    let planet = new Planet()\n  }\n\n  return (\n    <AppProvider contexts={[RadioProvider, ToggleProvider]}>\n      <Background />\n      <SolarSystem planets={planets}/>\n      <CustomizationMenu />\n    </AppProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}