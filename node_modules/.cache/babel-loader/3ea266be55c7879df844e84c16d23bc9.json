{"ast":null,"code":"var _jsxFileName = \"/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/components/SolarSystem.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { planetInfo } from '../consts/PlanetInfo.js';\nimport Canvas from './Canvas.js';\nimport Planet from '../js/Planet.js';\nimport { useToggleState } from '../contexts/ToggleContext.js';\nimport { useRadioState } from '../contexts/RadioContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SolarSystem(planets) {\n  _s();\n\n  const toggleOptions = useToggleState();\n  const radioOptions = useRadioState();\n  const dragType = radioOptions[0].options.find(option => option.checked === true).name;\n  const shadowType = radioOptions[1].options.find(option => option.checked === true).name;\n  const backgroundToggle = toggleOptions.find(option => option.name === 'background').checked;\n  const orbitToggle = toggleOptions.find(option => option.name === 'orbit-path').checked;\n  const planetArtToggle = toggleOptions.find(option => option.name === 'planet-art').checked; // let planets = [];\n  // const createPlanets = () => {\n  //   console.log(\"createPlanets\");\n  //   let sun;\n  //   let earth;\n  //   for (let planet of planetInfo) {\n  //     if (planet.name === 'sun') {\n  //       let sunStar = {\n  //         x: window.innerWidth/2,\n  //         y: window.innerHeight/2,\n  //       }\n  //       sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n  //       planets.push(sun);\n  //     } else if (planet.name === 'earth') {\n  //       earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n  //       planets.push(earth);\n  //     } else {\n  //       if (planet.star === 'sun') {\n  //         planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n  //       } else {\n  //         planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n  //       }\n  //     }\n  //   }\n  // }\n  // createPlanets();\n\n  const draw = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.update(ctx, dragType, planetArtToggle);\n    }\n  };\n\n  const drawShadow = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.drawShadow(ctx, shadowType, planetArtToggle, backgroundToggle);\n    }\n  };\n\n  const drawPath = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    if (orbitToggle) {\n      for (let planet of planets) {\n        planet.drawOrbitPath(ctx);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      draw: draw,\n      id: \"main-canvas\",\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"path-canvas\",\n      draw: drawPath,\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      id: \"shadow-canvas\",\n      draw: drawShadow,\n      type: \"dynamic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SolarSystem, \"d67nsuLESzsGcVkQoax9mSwJXmc=\", false, function () {\n  return [useToggleState, useRadioState];\n});\n\n_c = SolarSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SolarSystem\");","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/components/SolarSystem.js"],"names":["React","planetInfo","Canvas","Planet","useToggleState","useRadioState","SolarSystem","planets","toggleOptions","radioOptions","dragType","options","find","option","checked","name","shadowType","backgroundToggle","orbitToggle","planetArtToggle","draw","ctx","stageWidth","stageHeight","clearRect","planet","update","drawShadow","drawPath","drawOrbitPath"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { planetInfo } from '../consts/PlanetInfo.js';\nimport Canvas from './Canvas.js';\nimport Planet from '../js/Planet.js';\nimport { useToggleState } from '../contexts/ToggleContext.js';\nimport { useRadioState } from '../contexts/RadioContext.js';\n\nexport default function SolarSystem(planets) {\n  const toggleOptions = useToggleState();\n  const radioOptions = useRadioState();\n  const dragType = radioOptions[0].options.find(option => option.checked === true).name;\n  const shadowType = radioOptions[1].options.find(option => option.checked === true).name;\n  const backgroundToggle = toggleOptions.find(option => option.name === 'background').checked;\n  const orbitToggle = toggleOptions.find(option => option.name === 'orbit-path').checked;\n  const planetArtToggle = toggleOptions.find(option => option.name === 'planet-art').checked;\n  // let planets = [];\n\n  // const createPlanets = () => {\n  //   console.log(\"createPlanets\");\n  //   let sun;\n  //   let earth;\n  \n  //   for (let planet of planetInfo) {\n  //     if (planet.name === 'sun') {\n  //       let sunStar = {\n  //         x: window.innerWidth/2,\n  //         y: window.innerHeight/2,\n  //       }\n  //       sun = new Planet(planet.name, sunStar, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n  //       planets.push(sun);\n  //     } else if (planet.name === 'earth') {\n  //       earth = new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src);\n  //       planets.push(earth);\n  //     } else {\n  //       if (planet.star === 'sun') {\n  //         planets.push(new Planet(planet.name, sun, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n  //       } else {\n  //         planets.push(new Planet(planet.name, earth, planet.radius, planet.color, planet.velocity, planet.orbitRadius, planet.src));\n  //       }\n  //     }\n  //   }\n  // }\n  // createPlanets();\n\n  const draw = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n    \n    for (let planet of planets) {\n      planet.update(ctx, dragType, planetArtToggle);\n    }\n  }\n\n  const drawShadow = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n\n    for (let planet of planets) {\n      planet.drawShadow(ctx, shadowType, planetArtToggle, backgroundToggle);\n    }\n  }\n\n  const drawPath = (ctx, stageWidth, stageHeight) => {\n    ctx.clearRect(0, 0, stageWidth, stageHeight);\n    if (orbitToggle) {\n      for (let planet of planets) {\n        planet.drawOrbitPath(ctx);\n      }\n    }\n  }\n\n  return (\n    <>\n      <Canvas \n        draw={draw} \n        id='main-canvas' \n        type='dynamic'\n      />\n      <Canvas id='path-canvas' draw={drawPath} type='dynamic'/>\n      <Canvas id='shadow-canvas' draw={drawShadow} type='dynamic'/>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}