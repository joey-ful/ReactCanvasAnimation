{"ast":null,"code":"export default class Planet {\n  constructor(name, star, _radius, color, velocity, orbitRadius) {\n    this.onMouseDown = e => {\n      this.offsetX = e.clientX - this.x;\n      this.offsetY = e.clientY - this.y;\n      let radius = this.radius; // if (this.options['planet-art']) {\n      //   if (this.name === 'saturn') {\n      //     radius = this.radius * 4;\n      //   } else if (this.name === 'uranus') {\n      //     radius = this.radius * 4.2;\n      //   }\n      // }\n\n      if (Math.abs(this.offsetX) <= radius && Math.abs(this.offsetY) <= this.radius) {\n        this.clicked = true;\n        this.mouse.x = e.clientX - this.offsetX;\n        this.mouse.y = e.clientY - this.offsetY;\n        this.canvas.addEventListener('mousemove', this.onMouseMove);\n      }\n    };\n\n    this.onMouseMove = e => {\n      this.mouse.x = e.clientX - this.offsetX;\n      this.mouse.y = e.clientY - this.offsetY;\n\n      if (this.name !== 'sun' && this.name !== 'moon') {\n        this.orbitRadius = Math.sqrt(Math.pow(this.mouse.x - this.star.x, 2) + Math.pow(this.mouse.y - this.star.y, 2));\n        this.theta = Math.acos((this.mouse.x - this.star.x) / this.orbitRadius);\n\n        if (this.mouse.y - this.star.y < 0) {\n          this.theta = 2 * Math.PI - this.theta;\n        }\n\n        this.toX = this.mouse.x + (this.radius + 30) * Math.cos(this.theta);\n        this.toY = this.mouse.y + (this.radius + 30) * Math.sin(this.theta);\n      }\n    };\n\n    this.restore = () => {\n      if (this.clicked && this.name !== 'sun') {\n        this.clicked = false;\n        this.orbitRadius = Math.sqrt(Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2));\n        this.theta = Math.acos((this.x - this.star.x) / this.orbitRadius);\n\n        if (this.y - this.star.y < 0) {\n          this.theta = 2 * Math.PI - this.theta;\n        }\n\n        this.canvas.removeEventListener('mousemove', this.onMouseMove);\n      } else if (this.clicked && this.name === 'sun') {\n        this.clicked = false;\n        this.star.x = this.x;\n        this.star.y = this.y;\n        this.canvas.removeEventListener('mousemove', this.onMouseMove);\n      }\n\n      this.canvas.removeEventListener('mousedown', this.onMouseDown);\n    };\n\n    this.name = name;\n    this.star = star;\n    this.radius = _radius;\n    this.color = color;\n    this.velocity = velocity;\n    this.orbitRadius = orbitRadius;\n    this.theta = Math.random() * Math.PI * 2;\n    this.clicked = false;\n    this.mouse = {\n      x: star.x,\n      y: star.y\n    };\n    this.distanceFromCenter = orbitRadius;\n    this.x = star.x + orbitRadius * Math.cos(this.theta);\n    this.y = star.y + orbitRadius * Math.sin(this.theta);\n    this.img = new Image();\n\n    this.img.onload = () => {\n      ctx.drawImage(this.img, imgX, imgY, width, this.radius * 2);\n    };\n\n    this.img.src = `../images/${this.name}.png`;\n  }\n\n  update(ctx, dragType, planetArtToggle) {\n    this.theta += this.velocity;\n    this.setDragOption(dragType);\n    this.setPlanetArtOption(ctx, planetArtToggle);\n  }\n\n  setDragOption(dragType) {\n    if (dragType === 'no-drag') {\n      this.noDragUpdate();\n    } else if (dragType === 'basic-drag') {\n      this.interaction();\n      this.dragUpdate();\n    } else if (dragType === 'elastic-drag') {\n      this.interaction();\n      this.elasticDragUpdate();\n    }\n  }\n\n  noDragUpdate() {\n    this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n    this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n  }\n\n  dragUpdate() {\n    if (this.clicked) {\n      this.x = this.mouse.x;\n      this.y = this.mouse.y;\n    } else {\n      this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    }\n  }\n\n  elasticDragUpdate() {\n    if (this.clicked) {\n      this.x += (this.mouse.x - this.x) * 0.05;\n      this.y += (this.mouse.y - this.y) * 0.05;\n    } else {\n      this.distanceFromCenter = Math.sqrt(Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2));\n      this.distanceFromCenter += (this.orbitRadius - this.distanceFromCenter) * 0.2;\n      this.x = this.star.x + this.distanceFromCenter * Math.cos(this.theta);\n      this.y = this.star.y + this.distanceFromCenter * Math.sin(this.theta);\n    }\n  }\n\n  drawShadow(shadowctx, shadowType, planetArtToggle, backgroundToggle) {\n    if (shadowType === 'round-shadow') {\n      this.drawRoundShadow(shadowctx, planetArtToggle, backgroundToggle);\n    } else if (shadowType === 'rectangular-shadow') {\n      this.drawRectangularShadow(shadowctx, backgroundToggle);\n    }\n  }\n\n  drawRectangularShadow(shadowctx, backgroundToggle) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findShadowEndPoint();\n      shadowctx.beginPath();\n\n      if (backgroundToggle) {\n        shadowctx.strokeStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.strokeStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.moveTo(this.x, this.y);\n      shadowctx.lineTo(this.toX, this.toY);\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.stroke();\n      shadowctx.closePath();\n    }\n  }\n\n  findShadowEndPoint() {\n    let extralength = this.setShadowLength();\n    this.toX = this.x + (this.radius + extralength) * Math.cos(this.theta);\n    this.toY = this.y + (this.radius + extralength) * Math.sin(this.theta);\n  }\n\n  setShadowLength() {\n    let extralength = 17;\n\n    if (this.name === 'venus') {\n      extralength += 2;\n    } else if (this.name === 'earth') {\n      extralength += 17;\n    } else if (this.name === 'mars') {\n      extralength += 18;\n    } else if (this.name === 'jupiter') {\n      extralength += 5;\n    } else if (this.name === 'saturn') {\n      extralength += 6;\n    } else if (this.name === 'uranus') {\n      extralength += 4;\n    }\n\n    return extralength;\n  }\n\n  drawRoundShadow(shadowctx, planetArtToggle, backgroundToggle) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findXYdistance(planetArtToggle);\n      this.findShadowCurveDepth();\n      this.findShadowPoints();\n      shadowctx.beginPath();\n      shadowctx.moveTo(this.Ax, this.Ay);\n      shadowctx.bezierCurveTo(this.Ax + this.BezierX, this.Ay + this.BezierY, this.Bx + this.BezierX, this.By + this.BezierY, this.Bx, this.By);\n      shadowctx.lineTo(this.Bx + this.shadowLengthX, this.By + this.shadowLengthY);\n      shadowctx.bezierCurveTo(this.Bx + this.BezierX + this.shadowLengthX, this.By + this.BezierY + this.shadowLengthY, this.Ax + this.BezierX + this.shadowLengthX, this.Ay + this.BezierY + this.shadowLengthY, this.Ax + this.shadowLengthX, this.Ay + this.shadowLengthY);\n      shadowctx.lineTo(this.Ax, this.Ay);\n\n      if (backgroundToggle) {\n        shadowctx.fillStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.fillStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n\n      shadowctx.fill();\n      shadowctx.closePath();\n    }\n  }\n\n  findXYdistance(planetArtToggle) {\n    let radius = this.radius;\n\n    if (planetArtToggle) {\n      if (this.name === 'saturn') {\n        radius = this.radius * 0.8;\n      }\n    }\n\n    this.radiusX = radius * Math.sin(this.theta);\n    this.radiusY = radius * Math.cos(this.theta);\n    this.shadowLengthX = (this.radius + 20) * Math.cos(this.theta);\n    this.shadowLengthY = (this.radius + 20) * Math.sin(this.theta);\n\n    if (this.name === 'mars') {\n      this.shadowLengthX = (this.radius + 46) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 46) * Math.sin(this.theta);\n    } else if (this.name === 'earth') {\n      this.shadowLengthX = (this.radius + 30) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 30) * Math.sin(this.theta);\n    }\n  }\n\n  findShadowCurveDepth() {\n    this.BezierX = this.radius / 1.5 * Math.cos(this.theta);\n    this.BezierY = this.radius / 1.5 * Math.sin(this.theta);\n  }\n\n  findShadowPoints() {\n    this.Ax = this.x + this.radiusX;\n    this.Ay = this.y - this.radiusY;\n    this.Bx = this.x - this.radiusX;\n    this.By = this.y + this.radiusY;\n    this.Cx = this.Bx + this.shadowLengthX;\n    this.Cy = this.By + this.shadowLengthY;\n    this.Dx = this.Ax + this.shadowLengthX;\n    this.Dy = this.Ay + this.shadowLengthY;\n  }\n\n  setPlanetArtOption(ctx, planetArtToggle) {\n    if (planetArtToggle) {\n      this.drawArt(ctx);\n    } else {\n      this.drawCircle(ctx);\n    }\n  }\n\n  drawArt(ctx) {\n    ctx.beginPath();\n    let width = this.radius * 2;\n    let imgX = this.x - this.radius;\n    let imgY = this.y - this.radius;\n\n    if (this.name === 'saturn') {\n      width = this.radius * 4;\n      imgX -= this.radius;\n    } else if (this.name === 'uranus') {\n      width = this.radius * 4.2;\n      imgX -= this.radius * 1.1;\n    }\n\n    ctx.drawImage(this.img, imgX, imgY, width, this.radius * 2);\n    this.img.src = `../images/${this.name}.png`;\n    ctx.closePath();\n  }\n\n  drawCircle(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  drawOrbitPath(pathctx) {\n    pathctx.beginPath();\n    pathctx.arc(this.star.x, this.star.y, this.orbitRadius, 0, Math.PI * 2, false);\n    pathctx.globalAlpha = 0.4;\n    pathctx.strokeStyle = this.color;\n    pathctx.stroke();\n    pathctx.closePath();\n  }\n\n  interaction() {\n    this.canvas = document.getElementById('shadow-canvas');\n    this.canvas.addEventListener('mousedown', this.onMouseDown);\n    this.canvas.addEventListener('mouseup', this.restore);\n    this.canvas.addEventListener('mouseout', this.restore);\n  }\n\n}","map":{"version":3,"sources":["/Users/jehong/Programming/Portfolio/CanvasAnimationReact/src/js/Planet.js"],"names":["Planet","constructor","name","star","radius","color","velocity","orbitRadius","onMouseDown","e","offsetX","clientX","x","offsetY","clientY","y","Math","abs","clicked","mouse","canvas","addEventListener","onMouseMove","sqrt","pow","theta","acos","PI","toX","cos","toY","sin","restore","removeEventListener","random","distanceFromCenter","img","Image","onload","ctx","drawImage","imgX","imgY","width","src","update","dragType","planetArtToggle","setDragOption","setPlanetArtOption","noDragUpdate","interaction","dragUpdate","elasticDragUpdate","drawShadow","shadowctx","shadowType","backgroundToggle","drawRoundShadow","drawRectangularShadow","findShadowEndPoint","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","extralength","setShadowLength","findXYdistance","findShadowCurveDepth","findShadowPoints","Ax","Ay","bezierCurveTo","BezierX","BezierY","Bx","By","shadowLengthX","shadowLengthY","fillStyle","fill","radiusX","radiusY","Cx","Cy","Dx","Dy","drawArt","drawCircle","arc","drawOrbitPath","pathctx","globalAlpha","document","getElementById"],"mappings":"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","sourcesContent":["export default class Planet {\n  constructor(name, star, radius, color, velocity, orbitRadius) {\n    this.name = name;\n    this.star = star;\n    this.radius = radius;\n    this.color = color;\n    this.velocity = velocity;\n    this.orbitRadius = orbitRadius;\n\n    this.theta = Math.random() * Math.PI * 2;\n    this.clicked = false;\n    this.mouse = {\n      x: star.x,\n      y: star.y,\n    };\n\n    this.distanceFromCenter = orbitRadius;\n    this.x = star.x + orbitRadius * Math.cos(this.theta);\n    this.y = star.y + orbitRadius * Math.sin(this.theta);\n    this.img = new Image();\n\n    this.img.onload = () => {\n      ctx.drawImage(this.img, imgX, imgY, width, this.radius * 2);\n    }\n    this.img.src = `../images/${this.name}.png`;\n  }\n\n  update(ctx, dragType, planetArtToggle) {\n    this.theta += this.velocity;\n\n    this.setDragOption(dragType);\n    this.setPlanetArtOption(ctx, planetArtToggle);\n  }\n\n  setDragOption(dragType) {\n    if (dragType === 'no-drag') {\n      this.noDragUpdate();\n    } else if (dragType === 'basic-drag') {\n      this.interaction();\n      this.dragUpdate();\n    } else if (dragType === 'elastic-drag') {\n      this.interaction();\n      this.elasticDragUpdate();\n    }\n  }\n\n  noDragUpdate() {\n    this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n    this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n  }\n\n  dragUpdate() {\n    if (this.clicked) {\n      this.x = this.mouse.x;\n      this.y = this.mouse.y;\n    } else {\n      this.x = this.star.x + this.orbitRadius * Math.cos(this.theta);\n      this.y = this.star.y + this.orbitRadius * Math.sin(this.theta);\n    }\n  }\n\n  elasticDragUpdate() {\n    if (this.clicked) {\n      this.x += (this.mouse.x - this.x) * 0.05;\n      this.y += (this.mouse.y - this.y) * 0.05;\n    } else {\n      this.distanceFromCenter = Math.sqrt(\n        Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2)\n      );\n      this.distanceFromCenter +=\n        (this.orbitRadius - this.distanceFromCenter) * 0.2;\n      this.x = this.star.x + this.distanceFromCenter * Math.cos(this.theta);\n      this.y = this.star.y + this.distanceFromCenter * Math.sin(this.theta);\n    }\n  }\n\n  drawShadow(shadowctx, shadowType, planetArtToggle, backgroundToggle) {\n    if (shadowType === 'round-shadow') {\n      this.drawRoundShadow(shadowctx, planetArtToggle, backgroundToggle);\n    } else if (shadowType === 'rectangular-shadow') {\n      this.drawRectangularShadow(shadowctx, backgroundToggle);\n    }\n  }\n\n  drawRectangularShadow(shadowctx, backgroundToggle) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findShadowEndPoint();\n\n      shadowctx.beginPath();\n      if (backgroundToggle) {\n        shadowctx.strokeStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.strokeStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.moveTo(this.x, this.y);\n      shadowctx.lineTo(this.toX, this.toY);\n      shadowctx.lineWidth = this.radius * 2;\n      shadowctx.stroke();\n      shadowctx.closePath();\n    }\n  }\n\n  findShadowEndPoint() {\n    let extralength = this.setShadowLength();\n\n    this.toX = this.x + (this.radius + extralength) * Math.cos(this.theta);\n    this.toY = this.y + (this.radius + extralength) * Math.sin(this.theta);\n  }\n\n  setShadowLength() {\n    let extralength = 17;\n\n    if (this.name === 'venus') {\n      extralength += 2;\n    } else if (this.name === 'earth') {\n      extralength += 17;\n    } else if (this.name === 'mars') {\n      extralength += 18;\n    } else if (this.name === 'jupiter') {\n      extralength += 5;\n    } else if (this.name === 'saturn') {\n      extralength += 6;\n    } else if (this.name === 'uranus') {\n      extralength += 4;\n    }\n\n    return extralength;\n  }\n\n  drawRoundShadow(shadowctx, planetArtToggle, backgroundToggle) {\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.findXYdistance(planetArtToggle);\n      this.findShadowCurveDepth();\n      this.findShadowPoints();\n\n      shadowctx.beginPath();\n      shadowctx.moveTo(this.Ax, this.Ay);\n      shadowctx.bezierCurveTo(\n        this.Ax + this.BezierX,\n        this.Ay + this.BezierY,\n        this.Bx + this.BezierX,\n        this.By + this.BezierY,\n        this.Bx,\n        this.By\n      );\n      shadowctx.lineTo(\n        this.Bx + this.shadowLengthX,\n        this.By + this.shadowLengthY\n      );\n      shadowctx.bezierCurveTo(\n        this.Bx + this.BezierX + this.shadowLengthX,\n        this.By + this.BezierY + this.shadowLengthY,\n        this.Ax + this.BezierX + this.shadowLengthX,\n        this.Ay + this.BezierY + this.shadowLengthY,\n        this.Ax + this.shadowLengthX,\n        this.Ay + this.shadowLengthY\n      );\n      shadowctx.lineTo(this.Ax, this.Ay);\n      if (backgroundToggle) {\n        shadowctx.fillStyle = 'rgba(33, 69, 104, 0.3)';\n      } else {\n        shadowctx.fillStyle = 'rgba(77, 87, 105, 0.4)';\n      }\n      shadowctx.fill();\n      shadowctx.closePath();\n    }\n  }\n\n  findXYdistance(planetArtToggle) {\n    let radius = this.radius;\n\n    if (planetArtToggle) {\n      if (this.name === 'saturn') {\n        radius = this.radius * 0.8;\n      }\n    }\n\n    this.radiusX = radius * Math.sin(this.theta);\n    this.radiusY = radius * Math.cos(this.theta);\n    this.shadowLengthX = (this.radius + 20) * Math.cos(this.theta);\n    this.shadowLengthY = (this.radius + 20) * Math.sin(this.theta);\n\n    if (this.name === 'mars') {\n      this.shadowLengthX = (this.radius + 46) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 46) * Math.sin(this.theta);\n    } else if (this.name === 'earth') {\n      this.shadowLengthX = (this.radius + 30) * Math.cos(this.theta);\n      this.shadowLengthY = (this.radius + 30) * Math.sin(this.theta);\n    }\n  }\n\n  findShadowCurveDepth() {\n    this.BezierX = (this.radius / 1.5) * Math.cos(this.theta);\n    this.BezierY = (this.radius / 1.5) * Math.sin(this.theta);\n  }\n\n  findShadowPoints() {\n    this.Ax = this.x + this.radiusX;\n    this.Ay = this.y - this.radiusY;\n    this.Bx = this.x - this.radiusX;\n    this.By = this.y + this.radiusY;\n    this.Cx = this.Bx + this.shadowLengthX;\n    this.Cy = this.By + this.shadowLengthY;\n    this.Dx = this.Ax + this.shadowLengthX;\n    this.Dy = this.Ay + this.shadowLengthY;\n  }\n\n  setPlanetArtOption(ctx, planetArtToggle) {\n    if (planetArtToggle) {\n      this.drawArt(ctx);\n    } else {\n      this.drawCircle(ctx);\n    }\n  }\n\n  drawArt(ctx) {\n    ctx.beginPath();\n\n    let width = this.radius * 2;\n    let imgX = this.x - this.radius;\n    let imgY = this.y - this.radius;\n\n    if (this.name === 'saturn') {\n      width = this.radius * 4;\n      imgX -= this.radius;\n    } else if (this.name === 'uranus') {\n      width = this.radius * 4.2;\n      imgX -= this.radius * 1.1;\n    }\n\n    ctx.drawImage(this.img, imgX, imgY, width, this.radius * 2);\n    this.img.src = `../images/${this.name}.png`;\n    ctx.closePath();\n  }\n\n  drawCircle(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  drawOrbitPath(pathctx) {\n    pathctx.beginPath();\n    pathctx.arc(\n      this.star.x,\n      this.star.y,\n      this.orbitRadius,\n      0,\n      Math.PI * 2,\n      false\n    );\n    pathctx.globalAlpha = 0.4;\n    pathctx.strokeStyle = this.color;\n    pathctx.stroke();\n    pathctx.closePath();\n  }\n\n  interaction() {\n    this.canvas = document.getElementById('shadow-canvas');\n\n    this.canvas.addEventListener('mousedown', this.onMouseDown);\n    this.canvas.addEventListener('mouseup', this.restore);\n    this.canvas.addEventListener('mouseout', this.restore);\n  }\n\n  onMouseDown = (e) => {\n    this.offsetX = e.clientX - this.x;\n    this.offsetY = e.clientY - this.y;\n\n    let radius = this.radius;\n\n    // if (this.options['planet-art']) {\n    //   if (this.name === 'saturn') {\n    //     radius = this.radius * 4;\n    //   } else if (this.name === 'uranus') {\n    //     radius = this.radius * 4.2;\n    //   }\n    // }\n\n    if (\n      Math.abs(this.offsetX) <= radius &&\n      Math.abs(this.offsetY) <= this.radius\n    ) {\n      this.clicked = true;\n      this.mouse.x = e.clientX - this.offsetX;\n      this.mouse.y = e.clientY - this.offsetY;\n      this.canvas.addEventListener('mousemove', this.onMouseMove);\n    }\n  };\n\n  onMouseMove = (e) => {\n    this.mouse.x = e.clientX - this.offsetX;\n    this.mouse.y = e.clientY - this.offsetY;\n\n    if (this.name !== 'sun' && this.name !== 'moon') {\n      this.orbitRadius = Math.sqrt(\n        Math.pow(this.mouse.x - this.star.x, 2) +\n          Math.pow(this.mouse.y - this.star.y, 2)\n      );\n      this.theta = Math.acos((this.mouse.x - this.star.x) / this.orbitRadius);\n\n      if (this.mouse.y - this.star.y < 0) {\n        this.theta = 2 * Math.PI - this.theta;\n      }\n\n      this.toX = this.mouse.x + (this.radius + 30) * Math.cos(this.theta);\n      this.toY = this.mouse.y + (this.radius + 30) * Math.sin(this.theta);\n    }\n  };\n\n  restore = () => {\n    if (this.clicked && this.name !== 'sun') {\n      this.clicked = false;\n\n      this.orbitRadius = Math.sqrt(\n        Math.pow(this.star.x - this.x, 2) + Math.pow(this.star.y - this.y, 2)\n      );\n      this.theta = Math.acos((this.x - this.star.x) / this.orbitRadius);\n\n      if (this.y - this.star.y < 0) {\n        this.theta = 2 * Math.PI - this.theta;\n      }\n\n      this.canvas.removeEventListener('mousemove', this.onMouseMove);\n    } else if (this.clicked && this.name === 'sun') {\n      this.clicked = false;\n      this.star.x = this.x;\n      this.star.y = this.y;\n      this.canvas.removeEventListener('mousemove', this.onMouseMove);\n    }\n\n    this.canvas.removeEventListener('mousedown', this.onMouseDown);\n  };\n}"]},"metadata":{},"sourceType":"module"}